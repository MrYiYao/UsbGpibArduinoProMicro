
TestAndMeasurement.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000229a  0000232e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000229a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d1  0080011c  0080011c  0000234a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000234a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000235c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000378  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007974  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001f1f  00000000  00000000  0000a088  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000409c  00000000  00000000  0000bfa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b34  00000000  00000000  00010044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002604  00000000  00000000  00010b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005042  00000000  00000000  0001317c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  000181be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
       2:	00 00       	nop
       4:	a3 c0       	rjmp	.+326    	; 0x14c <__bad_interrupt>
       6:	00 00       	nop
       8:	a1 c0       	rjmp	.+322    	; 0x14c <__bad_interrupt>
       a:	00 00       	nop
       c:	9f c0       	rjmp	.+318    	; 0x14c <__bad_interrupt>
       e:	00 00       	nop
      10:	9d c0       	rjmp	.+314    	; 0x14c <__bad_interrupt>
      12:	00 00       	nop
      14:	9b c0       	rjmp	.+310    	; 0x14c <__bad_interrupt>
      16:	00 00       	nop
      18:	99 c0       	rjmp	.+306    	; 0x14c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	97 c0       	rjmp	.+302    	; 0x14c <__bad_interrupt>
      1e:	00 00       	nop
      20:	95 c0       	rjmp	.+298    	; 0x14c <__bad_interrupt>
      22:	00 00       	nop
      24:	93 c0       	rjmp	.+294    	; 0x14c <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__vector_10>
      2c:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__vector_11>
      30:	8d c0       	rjmp	.+282    	; 0x14c <__bad_interrupt>
      32:	00 00       	nop
      34:	8b c0       	rjmp	.+278    	; 0x14c <__bad_interrupt>
      36:	00 00       	nop
      38:	89 c0       	rjmp	.+274    	; 0x14c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	87 c0       	rjmp	.+270    	; 0x14c <__bad_interrupt>
      3e:	00 00       	nop
      40:	85 c0       	rjmp	.+266    	; 0x14c <__bad_interrupt>
      42:	00 00       	nop
      44:	83 c0       	rjmp	.+262    	; 0x14c <__bad_interrupt>
      46:	00 00       	nop
      48:	81 c0       	rjmp	.+258    	; 0x14c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7f c0       	rjmp	.+254    	; 0x14c <__bad_interrupt>
      4e:	00 00       	nop
      50:	7d c0       	rjmp	.+250    	; 0x14c <__bad_interrupt>
      52:	00 00       	nop
      54:	7b c0       	rjmp	.+246    	; 0x14c <__bad_interrupt>
      56:	00 00       	nop
      58:	79 c0       	rjmp	.+242    	; 0x14c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <__vector_23>
      60:	75 c0       	rjmp	.+234    	; 0x14c <__bad_interrupt>
      62:	00 00       	nop
      64:	73 c0       	rjmp	.+230    	; 0x14c <__bad_interrupt>
      66:	00 00       	nop
      68:	71 c0       	rjmp	.+226    	; 0x14c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	6f c0       	rjmp	.+222    	; 0x14c <__bad_interrupt>
      6e:	00 00       	nop
      70:	6d c0       	rjmp	.+218    	; 0x14c <__bad_interrupt>
      72:	00 00       	nop
      74:	6b c0       	rjmp	.+214    	; 0x14c <__bad_interrupt>
      76:	00 00       	nop
      78:	69 c0       	rjmp	.+210    	; 0x14c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	67 c0       	rjmp	.+206    	; 0x14c <__bad_interrupt>
      7e:	00 00       	nop
      80:	65 c0       	rjmp	.+202    	; 0x14c <__bad_interrupt>
      82:	00 00       	nop
      84:	63 c0       	rjmp	.+198    	; 0x14c <__bad_interrupt>
      86:	00 00       	nop
      88:	61 c0       	rjmp	.+194    	; 0x14c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	5f c0       	rjmp	.+190    	; 0x14c <__bad_interrupt>
      8e:	00 00       	nop
      90:	5d c0       	rjmp	.+186    	; 0x14c <__bad_interrupt>
      92:	00 00       	nop
      94:	5b c0       	rjmp	.+182    	; 0x14c <__bad_interrupt>
      96:	00 00       	nop
      98:	59 c0       	rjmp	.+178    	; 0x14c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	57 c0       	rjmp	.+174    	; 0x14c <__bad_interrupt>
      9e:	00 00       	nop
      a0:	55 c0       	rjmp	.+170    	; 0x14c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	53 c0       	rjmp	.+166    	; 0x14c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	51 c0       	rjmp	.+162    	; 0x14c <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	10 03 47 00 70 00 69 00 62 00 55 00 73 00 62 00     ..G.p.i.b.U.s.b.
      bc:	00 00                                               ..

000000be <ManufacturerString>:
      be:	16 03 58 00 79 00 70 00 68 00 72 00 6f 00 4c 00     ..X.y.p.h.r.o.L.
      ce:	61 00 62 00 73 00 00 00                             a.b.s...

000000d6 <LanguageString>:
      d6:	04 03 09 04                                         ....

000000da <ConfigurationDescriptor>:
      da:	09 02 27 00 01 01 00 c0 32 09 04 00 00 02 fe 03     ..'.....2.......
      ea:	01 00 07 05 03 02 40 00 05 07 05 82 02 40 00 05     ......@......@..
      fa:	00 00 00 00 00 00 00                                .......

00000101 <DeviceDescriptor>:
     101:	12 01 10 01 00 00 00 08 eb 03 65 20 01 00 01 02     ..........e ....
     111:	03 01 00                                            ...

00000114 <__ctors_end>:
     114:	11 24       	eor	r1, r1
     116:	1f be       	out	0x3f, r1	; 63
     118:	cf ef       	ldi	r28, 0xFF	; 255
     11a:	da e0       	ldi	r29, 0x0A	; 10
     11c:	de bf       	out	0x3e, r29	; 62
     11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
     120:	11 e0       	ldi	r17, 0x01	; 1
     122:	a0 e0       	ldi	r26, 0x00	; 0
     124:	b1 e0       	ldi	r27, 0x01	; 1
     126:	ea e9       	ldi	r30, 0x9A	; 154
     128:	f2 e2       	ldi	r31, 0x22	; 34
     12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
     12c:	05 90       	lpm	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	ac 31       	cpi	r26, 0x1C	; 28
     132:	b1 07       	cpc	r27, r17
     134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
     136:	21 e0       	ldi	r18, 0x01	; 1
     138:	ac e1       	ldi	r26, 0x1C	; 28
     13a:	b1 e0       	ldi	r27, 0x01	; 1
     13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
     13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
     140:	ad 3e       	cpi	r26, 0xED	; 237
     142:	b2 07       	cpc	r27, r18
     144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
     146:	e1 d7       	rcall	.+4034   	; 0x110a <main>
     148:	0c 94 4b 11 	jmp	0x2296	; 0x2296 <_exit>

0000014c <__bad_interrupt>:
     14c:	59 cf       	rjmp	.-334    	; 0x0 <__vectors>

0000014e <TMC_SetInternalSerial>:

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     14e:	4f e5       	ldi	r20, 0x5F	; 95
     150:	50 e0       	ldi	r21, 0x00	; 0
     152:	af b7       	in	r26, 0x3f	; 63
     154:	f8 94       	cli
     156:	93 e0       	ldi	r25, 0x03	; 3
     158:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <tmc_serial_string+0x1>
     15c:	88 23       	and	r24, r24
     15e:	b1 f1       	breq	.+108    	; 0x1cc <TMC_SetInternalSerial+0x7e>
     160:	87 e4       	ldi	r24, 0x47	; 71
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tmc_serial_string+0x3>
     168:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tmc_serial_string+0x2>
     16c:	80 e5       	ldi	r24, 0x50	; 80
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tmc_serial_string+0x5>
     174:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string+0x4>
     178:	89 e4       	ldi	r24, 0x49	; 73
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <tmc_serial_string+0x7>
     180:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <tmc_serial_string+0x6>
     184:	82 e4       	ldi	r24, 0x42	; 66
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <tmc_serial_string+0x9>
     18c:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <tmc_serial_string+0x8>
     190:	50 93 85 01 	sts	0x0185, r21	; 0x800185 <tmc_serial_string+0xb>
     194:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <tmc_serial_string+0xa>
     198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     19c:	6a e0       	ldi	r22, 0x0A	; 10
     19e:	0e 94 20 11 	call	0x2240	; 0x2240 <__udivmodqi4>
     1a2:	28 2f       	mov	r18, r24
     1a4:	30 e0       	ldi	r19, 0x00	; 0
     1a6:	20 5d       	subi	r18, 0xD0	; 208
     1a8:	3f 4f       	sbci	r19, 0xFF	; 255
     1aa:	30 93 87 01 	sts	0x0187, r19	; 0x800187 <tmc_serial_string+0xd>
     1ae:	20 93 86 01 	sts	0x0186, r18	; 0x800186 <tmc_serial_string+0xc>
     1b2:	89 2f       	mov	r24, r25
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	c0 96       	adiw	r24, 0x30	; 48
     1b8:	90 93 89 01 	sts	0x0189, r25	; 0x800189 <tmc_serial_string+0xf>
     1bc:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <tmc_serial_string+0xe>
     1c0:	50 93 8b 01 	sts	0x018B, r21	; 0x80018b <tmc_serial_string+0x11>
     1c4:	40 93 8a 01 	sts	0x018A, r20	; 0x80018a <tmc_serial_string+0x10>
     1c8:	88 e0       	ldi	r24, 0x08	; 8
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <TMC_SetInternalSerial+0x80>
     1cc:	80 e0       	ldi	r24, 0x00	; 0
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	6e e0       	ldi	r22, 0x0E	; 14
     1d2:	71 e2       	ldi	r23, 0x21	; 33
     1d4:	28 2f       	mov	r18, r24
     1d6:	29 0f       	add	r18, r25
     1d8:	e6 2f       	mov	r30, r22
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	70 93 57 00 	sts	0x0057, r23	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
     1e0:	e4 91       	lpm	r30, Z
     1e2:	90 ff       	sbrs	r25, 0
     1e4:	03 c0       	rjmp	.+6      	; 0x1ec <TMC_SetInternalSerial+0x9e>
     1e6:	e2 95       	swap	r30
     1e8:	ef 70       	andi	r30, 0x0F	; 15
     1ea:	6f 5f       	subi	r22, 0xFF	; 255
     1ec:	ef 70       	andi	r30, 0x0F	; 15
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	4e 2f       	mov	r20, r30
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	ea 30       	cpi	r30, 0x0A	; 10
     1f6:	18 f0       	brcs	.+6      	; 0x1fe <TMC_SetInternalSerial+0xb0>
     1f8:	49 5c       	subi	r20, 0xC9	; 201
     1fa:	5f 4f       	sbci	r21, 0xFF	; 255
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <TMC_SetInternalSerial+0xb4>
     1fe:	40 5d       	subi	r20, 0xD0	; 208
     200:	5f 4f       	sbci	r21, 0xFF	; 255
     202:	f9 01       	movw	r30, r18
     204:	ee 0f       	add	r30, r30
     206:	ff 1f       	adc	r31, r31
     208:	e4 58       	subi	r30, 0x84	; 132
     20a:	fe 4f       	sbci	r31, 0xFE	; 254
     20c:	51 83       	std	Z+1, r21	; 0x01
     20e:	40 83       	st	Z, r20
     210:	9f 5f       	subi	r25, 0xFF	; 255
     212:	94 31       	cpi	r25, 0x14	; 20
     214:	f9 f6       	brne	.-66     	; 0x1d4 <TMC_SetInternalSerial+0x86>
     216:	8b 5e       	subi	r24, 0xEB	; 235
     218:	88 0f       	add	r24, r24
     21a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string>
     21e:	af bf       	out	0x3f, r26	; 63
     220:	08 95       	ret

00000222 <charToval>:
     222:	98 2f       	mov	r25, r24
     224:	80 ed       	ldi	r24, 0xD0	; 208
     226:	89 0f       	add	r24, r25
     228:	8a 30       	cpi	r24, 0x0A	; 10
     22a:	08 f0       	brcs	.+2      	; 0x22e <charToval+0xc>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	2f e9       	ldi	r18, 0x9F	; 159
     230:	29 0f       	add	r18, r25
     232:	26 30       	cpi	r18, 0x06	; 6
     234:	10 f4       	brcc	.+4      	; 0x23a <charToval+0x18>
     236:	89 ea       	ldi	r24, 0xA9	; 169
     238:	89 0f       	add	r24, r25
     23a:	2f eb       	ldi	r18, 0xBF	; 191
     23c:	29 0f       	add	r18, r25
     23e:	26 30       	cpi	r18, 0x06	; 6
     240:	10 f4       	brcc	.+4      	; 0x246 <charToval+0x24>
     242:	89 ec       	ldi	r24, 0xC9	; 201
     244:	89 0f       	add	r24, r25
     246:	08 95       	ret

00000248 <is_timedout>:
     248:	85 e3       	ldi	r24, 0x35	; 53
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <is_timedout+0x2>
     24e:	00 00       	nop
     250:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     254:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     258:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     25c:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     260:	00 97       	sbiw	r24, 0x00	; 0
     262:	a1 05       	cpc	r26, r1
     264:	b1 05       	cpc	r27, r1
     266:	69 f0       	breq	.+26     	; 0x282 <is_timedout+0x3a>
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	a1 09       	sbc	r26, r1
     26c:	b1 09       	sbc	r27, r1
     26e:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     272:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     276:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     27a:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	08 95       	ret
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	08 95       	ret

00000286 <tmc_gpib_write_timedout>:
     286:	0e 94 06 11 	call	0x220c	; 0x220c <USB_USBTask>
     28a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     28e:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     292:	89 2b       	or	r24, r25
     294:	08 95       	ret

00000296 <tmc_gpib_read_timedout>:
     296:	0e 94 06 11 	call	0x220c	; 0x220c <USB_USBTask>
     29a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IsTMCBulkINReset>
     29e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     2a2:	89 2b       	or	r24, r25
     2a4:	08 95       	ret

000002a6 <findGpibdevice>:
	bool devicepresent;
	
	//gpib_interface_clear();
	
	devicepresent = false;
	addr = gpib_search();
     2a6:	0e 94 ad 0b 	call	0x175a	; 0x175a <gpib_search>
	devicepresent = (addr < 255);
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	8f 3f       	cpi	r24, 0xFF	; 255
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <findGpibdevice+0xe>
     2b0:	90 e0       	ldi	r25, 0x00	; 0
	if (addr >= 255)	/* fallback to GPIB address 1, if no device was found */
		addr = 1;
     2b2:	81 e0       	ldi	r24, 0x01	; 1
	gpib_addr = addr; /* set global GPIB address to found address*/
     2b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <gpib_addr>
	
	return devicepresent;
}
     2b8:	89 2f       	mov	r24, r25
     2ba:	08 95       	ret

000002bc <identifyGpibDevice>:

/* returns TRUE, if a string was received over GPIB */
bool identifyGpibDevice(void)
{
     2bc:	ff 92       	push	r15
     2be:	0f 93       	push	r16
     2c0:	1f 93       	push	r17
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	00 d0       	rcall	.+0      	; 0x2c8 <identifyGpibDevice+0xc>
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;
     2cc:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <tmc_serial_string>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     2d0:	80 ea       	ldi	r24, 0xA0	; 160
     2d2:	96 e8       	ldi	r25, 0x86	; 134
     2d4:	a1 e0       	ldi	r26, 0x01	; 1
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     2dc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     2e0:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     2e4:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
	hascomma = false; /* does the response contain a , character? */

	tmc_serial_string.Header.Size = 0;

	timeout_start(100000); /* 1s timeout*/
	gpib_make_listener(gpib_addr, is_timedout);
     2e8:	64 e2       	ldi	r22, 0x24	; 36
     2ea:	71 e0       	ldi	r23, 0x01	; 1
     2ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     2f0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <gpib_make_listener>
	if (timeout_val != 0) gpib_writedat('*', false, is_timedout);
     2f4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     2f8:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     2fc:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     300:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     304:	89 2b       	or	r24, r25
     306:	8a 2b       	or	r24, r26
     308:	8b 2b       	or	r24, r27
     30a:	31 f0       	breq	.+12     	; 0x318 <identifyGpibDevice+0x5c>
     30c:	44 e2       	ldi	r20, 0x24	; 36
     30e:	51 e0       	ldi	r21, 0x01	; 1
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	8a e2       	ldi	r24, 0x2A	; 42
     314:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     318:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     31c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     320:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     324:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     328:	89 2b       	or	r24, r25
     32a:	8a 2b       	or	r24, r26
     32c:	8b 2b       	or	r24, r27
     32e:	31 f0       	breq	.+12     	; 0x33c <identifyGpibDevice+0x80>
     330:	44 e2       	ldi	r20, 0x24	; 36
     332:	51 e0       	ldi	r21, 0x01	; 1
     334:	60 e0       	ldi	r22, 0x00	; 0
     336:	89 e4       	ldi	r24, 0x49	; 73
     338:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     33c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     340:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     344:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     348:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     34c:	89 2b       	or	r24, r25
     34e:	8a 2b       	or	r24, r26
     350:	8b 2b       	or	r24, r27
     352:	31 f0       	breq	.+12     	; 0x360 <identifyGpibDevice+0xa4>
     354:	44 e2       	ldi	r20, 0x24	; 36
     356:	51 e0       	ldi	r21, 0x01	; 1
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	84 e4       	ldi	r24, 0x44	; 68
     35c:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('N', false, is_timedout);
     360:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     364:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     368:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     36c:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     370:	89 2b       	or	r24, r25
     372:	8a 2b       	or	r24, r26
     374:	8b 2b       	or	r24, r27
     376:	31 f0       	breq	.+12     	; 0x384 <identifyGpibDevice+0xc8>
     378:	44 e2       	ldi	r20, 0x24	; 36
     37a:	51 e0       	ldi	r21, 0x01	; 1
     37c:	60 e0       	ldi	r22, 0x00	; 0
     37e:	8e e4       	ldi	r24, 0x4E	; 78
     380:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     384:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     388:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     38c:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     390:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     394:	89 2b       	or	r24, r25
     396:	8a 2b       	or	r24, r26
     398:	8b 2b       	or	r24, r27
     39a:	31 f0       	breq	.+12     	; 0x3a8 <identifyGpibDevice+0xec>
     39c:	44 e2       	ldi	r20, 0x24	; 36
     39e:	51 e0       	ldi	r21, 0x01	; 1
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	8f e3       	ldi	r24, 0x3F	; 63
     3a4:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
	if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     3a8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     3ac:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     3b0:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     3b4:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     3b8:	89 2b       	or	r24, r25
     3ba:	8a 2b       	or	r24, r26
     3bc:	8b 2b       	or	r24, r27
     3be:	31 f0       	breq	.+12     	; 0x3cc <identifyGpibDevice+0x110>
     3c0:	44 e2       	ldi	r20, 0x24	; 36
     3c2:	51 e0       	ldi	r21, 0x01	; 1
     3c4:	61 e0       	ldi	r22, 0x01	; 1
     3c6:	8a e0       	ldi	r24, 0x0A	; 10
     3c8:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
	gpib_untalk_unlisten(is_timedout);
     3cc:	84 e2       	ldi	r24, 0x24	; 36
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 4d 0b 	call	0x169a	; 0x169a <gpib_untalk_unlisten>
	
	if (timeout_val != 0) 
     3d4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     3d8:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     3dc:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     3e0:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     3e4:	89 2b       	or	r24, r25
     3e6:	8a 2b       	or	r24, r26
     3e8:	8b 2b       	or	r24, r27
     3ea:	09 f4       	brne	.+2      	; 0x3ee <identifyGpibDevice+0x132>
     3ec:	71 c1       	rjmp	.+738    	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     3ee:	80 ea       	ldi	r24, 0xA0	; 160
     3f0:	96 e8       	ldi	r25, 0x86	; 134
     3f2:	a1 e0       	ldi	r26, 0x01	; 1
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     3fa:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     3fe:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     402:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
	gpib_untalk_unlisten(is_timedout);
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
     406:	64 e2       	ldi	r22, 0x24	; 36
     408:	71 e0       	ldi	r23, 0x01	; 1
     40a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     40e:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <gpib_make_talker>
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
	
	hascomma = false; /* does the response contain a , character? */
     412:	f1 2c       	mov	r15, r1
	
	if (timeout_val != 0) 
	{
		timeout_start(100000); /* 1s timeout*/
		gpib_make_talker(gpib_addr, is_timedout);
		len = 0;
     414:	10 e0       	ldi	r17, 0x00	; 0
		do
		{
			c = gpib_readdat(&eoi, &timedout, is_timedout);
     416:	44 e2       	ldi	r20, 0x24	; 36
     418:	51 e0       	ldi	r21, 0x01	; 1
     41a:	be 01       	movw	r22, r28
     41c:	6f 5f       	subi	r22, 0xFF	; 255
     41e:	7f 4f       	sbci	r23, 0xFF	; 255
     420:	ce 01       	movw	r24, r28
     422:	02 96       	adiw	r24, 0x02	; 2
     424:	0e 94 bf 0a 	call	0x157e	; 0x157e <gpib_readdat>
			hascomma = hascomma || (c == ',');
     428:	01 e0       	ldi	r16, 0x01	; 1
     42a:	f1 10       	cpse	r15, r1
     42c:	03 c0       	rjmp	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     42e:	8c 32       	cpi	r24, 0x2C	; 44
     430:	09 f0       	breq	.+2      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
     432:	00 e0       	ldi	r16, 0x00	; 0
     434:	f0 2e       	mov	r15, r16
			if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&') ) /* YEP, a comma and amphersand is allowed in USBTMC spec, but R&S SW does not like this... */
     436:	98 2f       	mov	r25, r24
     438:	9f 7e       	andi	r25, 0xEF	; 239
     43a:	9a 32       	cpi	r25, 0x2A	; 42
     43c:	61 f0       	breq	.+24     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     43e:	9f 32       	cpi	r25, 0x2F	; 47
     440:	51 f0       	breq	.+20     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     442:	8c 35       	cpi	r24, 0x5C	; 92
     444:	41 f0       	breq	.+16     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     446:	98 2f       	mov	r25, r24
     448:	9d 7f       	andi	r25, 0xFD	; 253
     44a:	90 32       	cpi	r25, 0x20	; 32
     44c:	21 f0       	breq	.+8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     44e:	8c 32       	cpi	r24, 0x2C	; 44
     450:	11 f0       	breq	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     452:	86 32       	cpi	r24, 0x26	; 38
     454:	09 f4       	brne	.+2      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
				c='_';
     456:	8f e5       	ldi	r24, 0x5F	; 95
			if ( (c >=32) && (c <=126))
     458:	90 ee       	ldi	r25, 0xE0	; 224
     45a:	98 0f       	add	r25, r24
     45c:	9f 35       	cpi	r25, 0x5F	; 95
     45e:	50 f4       	brcc	.+20     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     460:	e1 2f       	mov	r30, r17
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	ee 0f       	add	r30, r30
     466:	ff 1f       	adc	r31, r31
     468:	e4 58       	subi	r30, 0x84	; 132
     46a:	fe 4f       	sbci	r31, 0xFE	; 254
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	91 83       	std	Z+1, r25	; 0x01
     470:	80 83       	st	Z, r24
     472:	1f 5f       	subi	r17, 0xFF	; 255
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
     474:	12 33       	cpi	r17, 0x32	; 50
     476:	50 f4       	brcc	.+20     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	81 11       	cpse	r24, r1
     47c:	07 c0       	rjmp	.+14     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
     47e:	8a 81       	ldd	r24, Y+2	; 0x02
     480:	88 23       	and	r24, r24
     482:	49 f2       	breq	.-110    	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     484:	03 c0       	rjmp	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     486:	12 30       	cpi	r17, 0x02	; 2
     488:	60 f0       	brcs	.+24     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			len--;
     48a:	11 50       	subi	r17, 0x01	; 1
			if ( (c >=32) && (c <=126))
				tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
		}
		while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi));
		/* strip away spaces at end */
		while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     48c:	e1 2f       	mov	r30, r17
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	ee 0f       	add	r30, r30
     492:	ff 1f       	adc	r31, r31
     494:	e6 58       	subi	r30, 0x86	; 134
     496:	fe 4f       	sbci	r31, 0xFE	; 254
     498:	80 81       	ld	r24, Z
     49a:	91 81       	ldd	r25, Z+1	; 0x01
     49c:	8f 35       	cpi	r24, 0x5F	; 95
     49e:	91 05       	cpc	r25, r1
     4a0:	91 f3       	breq	.-28     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
			len--;
		tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	81 0f       	add	r24, r17
     4a6:	88 0f       	add	r24, r24
     4a8:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string>
		
		gpib_untalk_unlisten(is_timedout);
     4ac:	84 e2       	ldi	r24, 0x24	; 36
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	0e 94 4d 0b 	call	0x169a	; 0x169a <gpib_untalk_unlisten>
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
     4b4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     4b8:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     4bc:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     4c0:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     4c4:	89 2b       	or	r24, r25
     4c6:	8a 2b       	or	r24, r26
     4c8:	8b 2b       	or	r24, r27
     4ca:	11 f0       	breq	.+4      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
     4cc:	11 11       	cpse	r17, r1
     4ce:	04 c1       	rjmp	.+520    	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     4d0:	80 ea       	ldi	r24, 0xA0	; 160
     4d2:	96 e8       	ldi	r25, 0x86	; 134
     4d4:	a1 e0       	ldi	r26, 0x01	; 1
     4d6:	b0 e0       	ldi	r27, 0x00	; 0
     4d8:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     4dc:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     4e0:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     4e4:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
		gpib_untalk_unlisten(is_timedout);
		
		if ( (timeout_val == 0) || (len==0) ) /* no response to *IDN? string*/
		{ /* so try out ID? query */
			timeout_start(100000); /* 1s timeout*/
			gpib_make_listener(gpib_addr, is_timedout);
     4e8:	64 e2       	ldi	r22, 0x24	; 36
     4ea:	71 e0       	ldi	r23, 0x01	; 1
     4ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     4f0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <gpib_make_listener>
			if (timeout_val != 0) gpib_writedat('I', false, is_timedout);
     4f4:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     4f8:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     4fc:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     500:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     504:	89 2b       	or	r24, r25
     506:	8a 2b       	or	r24, r26
     508:	8b 2b       	or	r24, r27
     50a:	31 f0       	breq	.+12     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
     50c:	44 e2       	ldi	r20, 0x24	; 36
     50e:	51 e0       	ldi	r21, 0x01	; 1
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	89 e4       	ldi	r24, 0x49	; 73
     514:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('D', false, is_timedout);
     518:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     51c:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     520:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     524:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     528:	89 2b       	or	r24, r25
     52a:	8a 2b       	or	r24, r26
     52c:	8b 2b       	or	r24, r27
     52e:	31 f0       	breq	.+12     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
     530:	44 e2       	ldi	r20, 0x24	; 36
     532:	51 e0       	ldi	r21, 0x01	; 1
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	84 e4       	ldi	r24, 0x44	; 68
     538:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('?', false, is_timedout);
     53c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     540:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     544:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     548:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     54c:	89 2b       	or	r24, r25
     54e:	8a 2b       	or	r24, r26
     550:	8b 2b       	or	r24, r27
     552:	31 f0       	breq	.+12     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
     554:	44 e2       	ldi	r20, 0x24	; 36
     556:	51 e0       	ldi	r21, 0x01	; 1
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	8f e3       	ldi	r24, 0x3F	; 63
     55c:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
     560:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     564:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     568:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     56c:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     570:	89 2b       	or	r24, r25
     572:	8a 2b       	or	r24, r26
     574:	8b 2b       	or	r24, r27
     576:	31 f0       	breq	.+12     	; 0x584 <__EEPROM_REGION_LENGTH__+0x184>
     578:	44 e2       	ldi	r20, 0x24	; 36
     57a:	51 e0       	ldi	r21, 0x01	; 1
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	8a e0       	ldi	r24, 0x0A	; 10
     580:	0e 94 9d 0b 	call	0x173a	; 0x173a <gpib_writedat>
			gpib_untalk_unlisten(is_timedout);
     584:	84 e2       	ldi	r24, 0x24	; 36
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 4d 0b 	call	0x169a	; 0x169a <gpib_untalk_unlisten>
			if (timeout_val != 0) 
     58c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <timeout_val>
     590:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <timeout_val+0x1>
     594:	a0 91 77 01 	lds	r26, 0x0177	; 0x800177 <timeout_val+0x2>
     598:	b0 91 78 01 	lds	r27, 0x0178	; 0x800178 <timeout_val+0x3>
     59c:	89 2b       	or	r24, r25
     59e:	8a 2b       	or	r24, r26
     5a0:	8b 2b       	or	r24, r27
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <__EEPROM_REGION_LENGTH__+0x1a6>
     5a4:	93 c0       	rjmp	.+294    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     5a6:	80 ea       	ldi	r24, 0xA0	; 160
     5a8:	96 e8       	ldi	r25, 0x86	; 134
     5aa:	a1 e0       	ldi	r26, 0x01	; 1
     5ac:	b0 e0       	ldi	r27, 0x00	; 0
     5ae:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     5b2:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     5b6:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     5ba:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
			if (timeout_val != 0) gpib_writedat('\n', true, is_timedout);
			gpib_untalk_unlisten(is_timedout);
			if (timeout_val != 0) 
			{
				timeout_start(100000); /* 1s timeout*/
				gpib_make_talker(gpib_addr, is_timedout);
     5be:	64 e2       	ldi	r22, 0x24	; 36
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     5c6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <gpib_make_talker>
				len = 0;
     5ca:	10 e0       	ldi	r17, 0x00	; 0
				do
				{
					c = gpib_readdat(&eoi, &timedout, is_timedout);
     5cc:	44 e2       	ldi	r20, 0x24	; 36
     5ce:	51 e0       	ldi	r21, 0x01	; 1
     5d0:	be 01       	movw	r22, r28
     5d2:	6f 5f       	subi	r22, 0xFF	; 255
     5d4:	7f 4f       	sbci	r23, 0xFF	; 255
     5d6:	ce 01       	movw	r24, r28
     5d8:	02 96       	adiw	r24, 0x02	; 2
     5da:	d1 d7       	rcall	.+4002   	; 0x157e <gpib_readdat>
					hascomma = hascomma || (c == ',');
     5dc:	01 e0       	ldi	r16, 0x01	; 1
     5de:	f1 10       	cpse	r15, r1
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     5e2:	8c 32       	cpi	r24, 0x2C	; 44
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <__EEPROM_REGION_LENGTH__+0x1e8>
     5e6:	00 e0       	ldi	r16, 0x00	; 0
     5e8:	f0 2e       	mov	r15, r16
					if ( (c=='\"') || (c=='*') || (c=='/') || (c=='\\') || (c==':') || (c=='?') || (c==' ') || (c==',') || (c=='&'))
     5ea:	98 2f       	mov	r25, r24
     5ec:	9f 7e       	andi	r25, 0xEF	; 239
     5ee:	9a 32       	cpi	r25, 0x2A	; 42
     5f0:	61 f0       	breq	.+24     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     5f2:	9f 32       	cpi	r25, 0x2F	; 47
     5f4:	51 f0       	breq	.+20     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     5f6:	8c 35       	cpi	r24, 0x5C	; 92
     5f8:	41 f0       	breq	.+16     	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     5fa:	98 2f       	mov	r25, r24
     5fc:	9d 7f       	andi	r25, 0xFD	; 253
     5fe:	90 32       	cpi	r25, 0x20	; 32
     600:	21 f0       	breq	.+8      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     602:	8c 32       	cpi	r24, 0x2C	; 44
     604:	11 f0       	breq	.+4      	; 0x60a <__EEPROM_REGION_LENGTH__+0x20a>
     606:	86 32       	cpi	r24, 0x26	; 38
     608:	09 f4       	brne	.+2      	; 0x60c <__EEPROM_REGION_LENGTH__+0x20c>
						c='_';
     60a:	8f e5       	ldi	r24, 0x5F	; 95
					if ( (c >=32) && (c <=126) )
     60c:	90 ee       	ldi	r25, 0xE0	; 224
     60e:	98 0f       	add	r25, r24
     610:	9f 35       	cpi	r25, 0x5F	; 95
     612:	58 f4       	brcc	.+22     	; 0x62a <__EEPROM_REGION_LENGTH__+0x22a>
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
     614:	e1 2f       	mov	r30, r17
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	e4 58       	subi	r30, 0x84	; 132
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	28 2f       	mov	r18, r24
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	31 83       	std	Z+1, r19	; 0x01
     626:	20 83       	st	Z, r18
     628:	1f 5f       	subi	r17, 0xFF	; 255
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
     62a:	12 33       	cpi	r17, 0x32	; 50
     62c:	70 f4       	brcc	.+28     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
     62e:	99 81       	ldd	r25, Y+1	; 0x01
     630:	91 11       	cpse	r25, r1
     632:	0b c0       	rjmp	.+22     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	91 11       	cpse	r25, r1
     638:	08 c0       	rjmp	.+16     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
     63a:	8d 30       	cpi	r24, 0x0D	; 13
     63c:	31 f0       	breq	.+12     	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
     63e:	8a 30       	cpi	r24, 0x0A	; 10
     640:	29 f6       	brne	.-118    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
     642:	03 c0       	rjmp	.+6      	; 0x64a <__EEPROM_REGION_LENGTH__+0x24a>
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     644:	12 30       	cpi	r17, 0x02	; 2
     646:	60 f0       	brcs	.+24     	; 0x660 <__EEPROM_REGION_LENGTH__+0x260>
					len--;
     648:	11 50       	subi	r17, 0x01	; 1
					if ( (c >=32) && (c <=126) )
						tmc_serial_string.UnicodeString[len++] = cpu_to_le16(c);
				}
				while ((len < TMC_MAX_SERIAL_STRING_LENGTH) && (!timedout) && (!eoi) && (c != '\r') && (c != '\n'));
				/* strip away spaces at end */
				while ((tmc_serial_string.UnicodeString[len-1] == '_') && (len > 1))
     64a:	e1 2f       	mov	r30, r17
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	ee 0f       	add	r30, r30
     650:	ff 1f       	adc	r31, r31
     652:	e6 58       	subi	r30, 0x86	; 134
     654:	fe 4f       	sbci	r31, 0xFE	; 254
     656:	80 81       	ld	r24, Z
     658:	91 81       	ldd	r25, Z+1	; 0x01
     65a:	8f 35       	cpi	r24, 0x5F	; 95
     65c:	91 05       	cpc	r25, r1
     65e:	91 f3       	breq	.-28     	; 0x644 <__EEPROM_REGION_LENGTH__+0x244>
					len--;
				tmc_serial_string.Header.Size = len*2 + sizeof(USB_Descriptor_Header_t);
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	81 0f       	add	r24, r17
     664:	88 0f       	add	r24, r24
     666:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <tmc_serial_string>
				gpib_untalk_unlisten(is_timedout);
     66a:	84 e2       	ldi	r24, 0x24	; 36
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	0e 94 4d 0b 	call	0x169a	; 0x169a <gpib_untalk_unlisten>
			}				
		}
		
		
		if (!hascomma)
     672:	01 11       	cpse	r16, r1
     674:	18 c0       	rjmp	.+48     	; 0x6a6 <__EEPROM_REGION_LENGTH__+0x2a6>
			if ( (tmc_serial_string.UnicodeString[0] = 'H') &&
     676:	88 e4       	ldi	r24, 0x48	; 72
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <tmc_serial_string+0x3>
     67e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <tmc_serial_string+0x2>
				 (tmc_serial_string.UnicodeString[1] = 'P') &&
     682:	80 e5       	ldi	r24, 0x50	; 80
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <tmc_serial_string+0x5>
     68a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <tmc_serial_string+0x4>
     68e:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <tmc_serial_string+0x6>
     692:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <tmc_serial_string+0x7>
     696:	20 53       	subi	r18, 0x30	; 48
     698:	31 09       	sbc	r19, r1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	2a 30       	cpi	r18, 0x0A	; 10
     69e:	31 05       	cpc	r19, r1
     6a0:	18 f0       	brcs	.+6      	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	01 c0       	rjmp	.+2      	; 0x6a8 <__EEPROM_REGION_LENGTH__+0x2a8>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
			{
				hascomma = true;
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
     6a8:	40 91 75 01 	lds	r20, 0x0175	; 0x800175 <timeout_val>
     6ac:	50 91 76 01 	lds	r21, 0x0176	; 0x800176 <timeout_val+0x1>
     6b0:	60 91 77 01 	lds	r22, 0x0177	; 0x800177 <timeout_val+0x2>
     6b4:	70 91 78 01 	lds	r23, 0x0178	; 0x800178 <timeout_val+0x3>
     6b8:	45 2b       	or	r20, r21
     6ba:	46 2b       	or	r20, r22
     6bc:	47 2b       	or	r20, r23
     6be:	41 f0       	breq	.+16     	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
     6c0:	11 23       	and	r17, r17
     6c2:	31 f0       	breq	.+12     	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
     6c4:	88 23       	and	r24, r24
     6c6:	21 f0       	breq	.+8      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
{
	uint8_t c, len, hascomma;
	bool    eoi, timedout;
	bool    gotStringViaGPIB;
	
	gotStringViaGPIB = true;
     6c8:	11 e0       	ldi	r17, 0x01	; 1
     6ca:	09 c0       	rjmp	.+18     	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     6cc:	00 23       	and	r16, r16
     6ce:	99 f2       	breq	.-90     	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
			}
		
		
		if ((timeout_val == 0) || (len == 0)  || (!hascomma) ) /* timeout happened or length is 0 => build a serial number based on GPIB address */
		{
			TMC_SetInternalSerial(true);
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	3d dd       	rcall	.-1414   	; 0x14e <TMC_SetInternalSerial>
			gotStringViaGPIB = false;
     6d4:	10 e0       	ldi	r17, 0x00	; 0
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <__EEPROM_REGION_LENGTH__+0x2de>
				gpib_untalk_unlisten(is_timedout);
			}				
		}
		
		
		if (!hascomma)
     6d8:	00 23       	and	r16, r16
     6da:	69 f2       	breq	.-102    	; 0x676 <__EEPROM_REGION_LENGTH__+0x276>
     6dc:	f5 cf       	rjmp	.-22     	; 0x6c8 <__EEPROM_REGION_LENGTH__+0x2c8>
		gotStringViaGPIB = false;
	}
	
	//TMC_SetInternalSerial(false);
	
	gpib_ren(false);
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	66 d6       	rcall	.+3276   	; 0x13ae <gpib_ren>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e2:	2f ef       	ldi	r18, 0xFF	; 255
     6e4:	81 ee       	ldi	r24, 0xE1	; 225
     6e6:	94 e0       	ldi	r25, 0x04	; 4
     6e8:	21 50       	subi	r18, 0x01	; 1
     6ea:	80 40       	sbci	r24, 0x00	; 0
     6ec:	90 40       	sbci	r25, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
	_delay_ms(100);
	gpib_ren(true);
     6f2:	00 00       	nop
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	5b d6       	rcall	.+3254   	; 0x13ae <gpib_ren>
	return gotStringViaGPIB;
}
     6f8:	81 2f       	mov	r24, r17
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	df 91       	pop	r29
     700:	cf 91       	pop	r28
     702:	1f 91       	pop	r17
     704:	0f 91       	pop	r16
     706:	ff 90       	pop	r15
     708:	08 95       	ret

0000070a <eeprom_update_if_changed>:

	SetGlobalInterruptMask(CurrentGlobalInt);
}

void eeprom_update_if_changed(uint16_t addr, uint8_t value)
{
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
     712:	16 2f       	mov	r17, r22
	uint8_t oldval;
	eeprom_busy_wait();
     714:	f9 99       	sbic	0x1f, 1	; 31
     716:	fe cf       	rjmp	.-4      	; 0x714 <eeprom_update_if_changed+0xa>
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
     718:	ce 01       	movw	r24, r28
     71a:	0e 94 35 11 	call	0x226a	; 0x226a <eeprom_read_byte>
	if (oldval != value)
     71e:	81 17       	cp	r24, r17
     720:	49 f0       	breq	.+18     	; 0x734 <eeprom_update_if_changed+0x2a>
	{
		eeprom_busy_wait();
     722:	f9 99       	sbic	0x1f, 1	; 31
     724:	fe cf       	rjmp	.-4      	; 0x722 <eeprom_update_if_changed+0x18>
		eeprom_write_byte((uint8_t*)addr, value);		
     726:	61 2f       	mov	r22, r17
     728:	ce 01       	movw	r24, r28
	}
}
     72a:	df 91       	pop	r29
     72c:	cf 91       	pop	r28
     72e:	1f 91       	pop	r17
	eeprom_busy_wait();
	oldval = eeprom_read_byte((uint8_t*)addr); /* read previous gpib address */
	if (oldval != value)
	{
		eeprom_busy_wait();
		eeprom_write_byte((uint8_t*)addr, value);		
     730:	0c 94 3d 11 	jmp	0x227a	; 0x227a <eeprom_write_byte>
	}
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	1f 91       	pop	r17
     73a:	08 95       	ret

0000073c <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     73c:	84 b7       	in	r24, 0x34	; 52
     73e:	87 7f       	andi	r24, 0xF7	; 247
     740:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	f8 94       	cli
     746:	a8 95       	wdr
     748:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     74c:	88 61       	ori	r24, 0x18	; 24
     74e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     752:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
     756:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	80 e8       	ldi	r24, 0x80	; 128
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     764:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
     768:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	

	/* Hardware Initialization */
	//LEDs_Init();
	USB_Init();
     76a:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <USB_Init>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
     76e:	e0 ee       	ldi	r30, 0xE0	; 224
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	80 81       	ld	r24, Z
     774:	81 60       	ori	r24, 0x01	; 1
     776:	80 83       	st	Z, r24
	USB_Detach();

	
	/* update the TMC default serial number*/
	TMC_SetInternalSerial(false);
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	e9 dc       	rcall	.-1582   	; 0x14e <TMC_SetInternalSerial>
	
	/* LED to output and turn on */
	DDRD |= _BV(5);
     77c:	55 9a       	sbi	0x0a, 5	; 10
	LED(1);
     77e:	5d 9a       	sbi	0x0b, 5	; 11
     780:	08 95       	ret

00000782 <EVENT_USB_Device_Connect>:
     782:	08 95       	ret

00000784 <EVENT_USB_Device_Disconnect>:

/** Event handler for the USB_Disconnect event. This indicates that the device is no longer connected to a host via
 *  the status LEDs and stops the USB management and CDC management tasks.
 */
void EVENT_USB_Device_Disconnect(void)
{
     784:	08 95       	ret

00000786 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     786:	42 e3       	ldi	r20, 0x32	; 50
     788:	61 ec       	ldi	r22, 0xC1	; 193
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Endpoint_ConfigureEndpoint_Prv>
     790:	42 e3       	ldi	r20, 0x32	; 50
     792:	61 e8       	ldi	r22, 0x81	; 129
     794:	82 e0       	ldi	r24, 0x02	; 2
     796:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <Endpoint_ConfigureEndpoint_Prv>
     79a:	42 e3       	ldi	r20, 0x32	; 50
     79c:	60 e8       	ldi	r22, 0x80	; 128
     79e:	83 e0       	ldi	r24, 0x03	; 3
     7a0:	0c 94 da 0d 	jmp	0x1bb4	; 0x1bb4 <Endpoint_ConfigureEndpoint_Prv>

000007a4 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
     7a4:	cf 93       	push	r28
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
	uint8_t btag, statusReg;
	
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
     7a6:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
     7aa:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <USB_ControlRequest+0x5>
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	29 f4       	brne	.+10     	; 0x7bc <EVENT_USB_Device_ControlRequest+0x18>
     7b2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     7b6:	80 fd       	sbrc	r24, 0
     7b8:	0b c0       	rjmp	.+22     	; 0x7d0 <EVENT_USB_Device_ControlRequest+0x2c>
     7ba:	7a c1       	rjmp	.+756    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
     7bc:	82 38       	cpi	r24, 0x82	; 130
     7be:	91 05       	cpc	r25, r1
     7c0:	19 f0       	breq	.+6      	; 0x7c8 <EVENT_USB_Device_ControlRequest+0x24>
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
     7c2:	03 97       	sbiw	r24, 0x03	; 3
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <EVENT_USB_Device_ControlRequest+0x24>
     7c6:	74 c1       	rjmp	.+744    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
     7c8:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     7cc:	81 ff       	sbrs	r24, 1
     7ce:	70 c1       	rjmp	.+736    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     7d0:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x1>
     7d4:	86 30       	cpi	r24, 0x06	; 6
     7d6:	09 f4       	brne	.+2      	; 0x7da <EVENT_USB_Device_ControlRequest+0x36>
     7d8:	fc c0       	rjmp	.+504    	; 0x9d2 <EVENT_USB_Device_ControlRequest+0x22e>
     7da:	90 f4       	brcc	.+36     	; 0x800 <EVENT_USB_Device_ControlRequest+0x5c>
     7dc:	83 30       	cpi	r24, 0x03	; 3
     7de:	09 f4       	brne	.+2      	; 0x7e2 <EVENT_USB_Device_ControlRequest+0x3e>
     7e0:	8c c0       	rjmp	.+280    	; 0x8fa <EVENT_USB_Device_ControlRequest+0x156>
     7e2:	38 f4       	brcc	.+14     	; 0x7f2 <EVENT_USB_Device_ControlRequest+0x4e>
     7e4:	81 30       	cpi	r24, 0x01	; 1
     7e6:	09 f4       	brne	.+2      	; 0x7ea <EVENT_USB_Device_ControlRequest+0x46>
     7e8:	59 c0       	rjmp	.+178    	; 0x89c <EVENT_USB_Device_ControlRequest+0xf8>
     7ea:	82 30       	cpi	r24, 0x02	; 2
     7ec:	09 f4       	brne	.+2      	; 0x7f0 <EVENT_USB_Device_ControlRequest+0x4c>
     7ee:	79 c0       	rjmp	.+242    	; 0x8e2 <EVENT_USB_Device_ControlRequest+0x13e>
     7f0:	5f c1       	rjmp	.+702    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
     7f2:	84 30       	cpi	r24, 0x04	; 4
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <EVENT_USB_Device_ControlRequest+0x54>
     7f6:	a8 c0       	rjmp	.+336    	; 0x948 <EVENT_USB_Device_ControlRequest+0x1a4>
     7f8:	85 30       	cpi	r24, 0x05	; 5
     7fa:	09 f4       	brne	.+2      	; 0x7fe <EVENT_USB_Device_ControlRequest+0x5a>
     7fc:	d5 c0       	rjmp	.+426    	; 0x9a8 <EVENT_USB_Device_ControlRequest+0x204>
     7fe:	58 c1       	rjmp	.+688    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
     800:	80 38       	cpi	r24, 0x80	; 128
     802:	71 f1       	breq	.+92     	; 0x860 <EVENT_USB_Device_ControlRequest+0xbc>
     804:	18 f5       	brcc	.+70     	; 0x84c <EVENT_USB_Device_ControlRequest+0xa8>
     806:	87 30       	cpi	r24, 0x07	; 7
     808:	09 f4       	brne	.+2      	; 0x80c <EVENT_USB_Device_ControlRequest+0x68>
     80a:	05 c1       	rjmp	.+522    	; 0xa16 <__DATA_REGION_LENGTH__+0x16>
     80c:	80 34       	cpi	r24, 0x40	; 64
     80e:	09 f0       	breq	.+2      	; 0x812 <EVENT_USB_Device_ControlRequest+0x6e>
     810:	4f c1       	rjmp	.+670    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     812:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     816:	87 7f       	andi	r24, 0xF7	; 247
     818:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     81c:	c1 e0       	ldi	r28, 0x01	; 1
     81e:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     822:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     826:	8e 77       	andi	r24, 0x7E	; 126
     828:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearSETUP();

				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     82c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <Endpoint_ClearStatusStage>
				
				LED(0);
     830:	5d 98       	cbi	0x0b, 5	; 11
     832:	2f ef       	ldi	r18, 0xFF	; 255
     834:	84 e3       	ldi	r24, 0x34	; 52
     836:	9c e0       	ldi	r25, 0x0C	; 12
     838:	21 50       	subi	r18, 0x01	; 1
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	90 40       	sbci	r25, 0x00	; 0
     83e:	e1 f7       	brne	.-8      	; 0x838 <EVENT_USB_Device_ControlRequest+0x94>
     840:	00 c0       	rjmp	.+0      	; 0x842 <EVENT_USB_Device_ControlRequest+0x9e>
     842:	00 00       	nop
				_delay_ms(250);
				LED(1);
     844:	5d 9a       	sbi	0x0b, 5	; 11
				
				s_nextwrite_mightbeparameterset = true;
     846:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <s_nextwrite_mightbeparameterset>
				break;
     84a:	32 c1       	rjmp	.+612    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
	
	if ( ((USB_ControlRequest.wIndex == INTERFACE_ID_TestAndMeasurement) && ((USB_ControlRequest.bmRequestType & REQREC_INTERFACE)!=0)) ||
	     (((USB_ControlRequest.wIndex == TMC_IN_EPADDR) || (USB_ControlRequest.wIndex == TMC_OUT_EPADDR)) && ((USB_ControlRequest.bmRequestType & REQREC_ENDPOINT)!=0))     )
	{
		/* Process TMC specific control requests */
		switch (USB_ControlRequest.bRequest)
     84c:	81 3a       	cpi	r24, 0xA1	; 161
     84e:	09 f4       	brne	.+2      	; 0x852 <EVENT_USB_Device_ControlRequest+0xae>
     850:	0e c1       	rjmp	.+540    	; 0xa6e <__DATA_REGION_LENGTH__+0x6e>
     852:	82 3a       	cpi	r24, 0xA2	; 162
     854:	09 f4       	brne	.+2      	; 0x858 <EVENT_USB_Device_ControlRequest+0xb4>
     856:	fb c0       	rjmp	.+502    	; 0xa4e <__DATA_REGION_LENGTH__+0x4e>
     858:	80 3a       	cpi	r24, 0xA0	; 160
     85a:	09 f0       	breq	.+2      	; 0x85e <EVENT_USB_Device_ControlRequest+0xba>
     85c:	29 c1       	rjmp	.+594    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
     85e:	f0 c0       	rjmp	.+480    	; 0xa40 <__DATA_REGION_LENGTH__+0x40>
		{
			case Req_ReadStatusByte:
			
//Jump_To_Bootloader();			
				btag = USB_ControlRequest.wValue;
     860:	c0 91 e7 01 	lds	r28, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     864:	80 e5       	ldi	r24, 0x50	; 80
     866:	93 ec       	ldi	r25, 0xC3	; 195
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     870:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     874:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     878:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
			
//Jump_To_Bootloader();			
				btag = USB_ControlRequest.wValue;

				timeout_start(50000); /* 0.5s timeout*/
				statusReg =  gpib_readStatusByte(gpib_addr, is_timedout);
     87c:	64 e2       	ldi	r22, 0x24	; 36
     87e:	71 e0       	ldi	r23, 0x01	; 1
     880:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     884:	c9 d6       	rcall	.+3474   	; 0x1618 <gpib_readStatusByte>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     886:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     88a:	97 7f       	andi	r25, 0xF7	; 247
     88c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	90 93 f1 00 	sts	0x00F1, r25	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     896:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     89a:	00 c1       	rjmp	.+512    	; 0xa9c <__DATA_REGION_LENGTH__+0x9c>

	
				
				break;
			case Req_InitiateAbortBulkOut:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     89c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     8a0:	92 3a       	cpi	r25, 0xA2	; 162
     8a2:	09 f0       	breq	.+2      	; 0x8a6 <EVENT_USB_Device_ControlRequest+0x102>
     8a4:	05 c1       	rjmp	.+522    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     8a6:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>
     8aa:	91 11       	cpse	r25, r1
     8ac:	0e c0       	rjmp	.+28     	; 0x8ca <EVENT_USB_Device_ControlRequest+0x126>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     8ae:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <CurrentTransferTag>
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
     8b8:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
     8bc:	42 17       	cp	r20, r18
     8be:	53 07       	cpc	r21, r19
     8c0:	31 f4       	brne	.+12     	; 0x8ce <EVENT_USB_Device_ControlRequest+0x12a>
					{
						/* Indicate that all in-progress/pending data OUT requests should be aborted */
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
     8c2:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <EVENT_USB_Device_ControlRequest+0x12c>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     8ca:	83 e8       	ldi	r24, 0x83	; 131
     8cc:	01 c0       	rjmp	.+2      	; 0x8d0 <EVENT_USB_Device_ControlRequest+0x12c>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     8ce:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkOUTReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkOut;
					}
IsTMCBulkOUTReset = true;
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <IsTMCBulkOUTReset>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     8d6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     8da:	97 7f       	andi	r25, 0xF7	; 247
     8dc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     8e0:	dd c0       	rjmp	.+442    	; 0xa9c <__DATA_REGION_LENGTH__+0x9c>
//Endpoint_ResetEndpoint(TMC_IN_EPADDR);
				}

				break;
			case Req_CheckAbortBulkOutStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     8e2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     8e6:	82 3a       	cpi	r24, 0xA2	; 162
     8e8:	09 f0       	breq	.+2      	; 0x8ec <EVENT_USB_Device_ControlRequest+0x148>
     8ea:	e2 c0       	rjmp	.+452    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				{
					/* Check that an ABORT BULK OUT transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkOut)
     8ec:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RequestInProgress>
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	d9 f5       	brne	.+118    	; 0x96a <EVENT_USB_Device_ControlRequest+0x1c6>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkOUTReset)
     8f4:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     8f8:	32 c0       	rjmp	.+100    	; 0x95e <EVENT_USB_Device_ControlRequest+0x1ba>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateAbortBulkIn:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     8fa:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     8fe:	92 3a       	cpi	r25, 0xA2	; 162
     900:	09 f0       	breq	.+2      	; 0x904 <EVENT_USB_Device_ControlRequest+0x160>
     902:	d6 c0       	rjmp	.+428    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
     904:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>
     908:	91 11       	cpse	r25, r1
     90a:	0e c0       	rjmp	.+28     	; 0x928 <EVENT_USB_Device_ControlRequest+0x184>
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
     90c:	20 91 69 01 	lds	r18, 0x0169	; 0x800169 <CurrentTransferTag>
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	40 91 e7 01 	lds	r20, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
     916:	50 91 e8 01 	lds	r21, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
     91a:	42 17       	cp	r20, r18
     91c:	53 07       	cpc	r21, r19
     91e:	31 f4       	brne	.+12     	; 0x92c <EVENT_USB_Device_ControlRequest+0x188>
					{
						/* Indicate that all in-progress/pending data IN requests should be aborted */
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
     920:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	03 c0       	rjmp	.+6      	; 0x92e <EVENT_USB_Device_ControlRequest+0x18a>
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that no split transaction is already in progress and the data transfer tag is valid */
					if (RequestInProgress != 0)
					{
						TMCRequestStatus = TMC_STATUS_SPLIT_IN_PROGRESS;
     928:	83 e8       	ldi	r24, 0x83	; 131
     92a:	01 c0       	rjmp	.+2      	; 0x92e <EVENT_USB_Device_ControlRequest+0x18a>
					}
					else if (USB_ControlRequest.wValue != CurrentTransferTag)
					{
						TMCRequestStatus = TMC_STATUS_TRANSFER_NOT_IN_PROGRESS;
     92c:	81 e8       	ldi	r24, 0x81	; 129
						IsTMCBulkINReset = true;

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateAbortBulkIn;
					}
					IsTMCBulkINReset = true;
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <IsTMCBulkINReset>
     934:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     938:	97 7f       	andi	r25, 0xF7	; 247
     93a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     93e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>

					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_8(CurrentTransferTag);
     942:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CurrentTransferTag>
     946:	aa c0       	rjmp	.+340    	; 0xa9c <__DATA_REGION_LENGTH__+0x9c>
#endif
				}

				break;
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
     948:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     94c:	82 3a       	cpi	r24, 0xA2	; 162
     94e:	09 f0       	breq	.+2      	; 0x952 <EVENT_USB_Device_ControlRequest+0x1ae>
     950:	af c0       	rjmp	.+350    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
     952:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RequestInProgress>
     956:	83 30       	cpi	r24, 0x03	; 3
     958:	41 f4       	brne	.+16     	; 0x96a <EVENT_USB_Device_ControlRequest+0x1c6>
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset)
     95a:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     95e:	81 11       	cpse	r24, r1
     960:	06 c0       	rjmp	.+12     	; 0x96e <EVENT_USB_Device_ControlRequest+0x1ca>
					  TMCRequestStatus = TMC_STATUS_PENDING;
					else
					  RequestInProgress = 0;
     962:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	03 c0       	rjmp	.+6      	; 0x970 <EVENT_USB_Device_ControlRequest+0x1cc>
			case Req_CheckAbortBulkInStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_ENDPOINT))
				{
					/* Check that an ABORT BULK IN transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateAbortBulkIn)
					  TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     96a:	82 e8       	ldi	r24, 0x82	; 130
     96c:	01 c0       	rjmp	.+2      	; 0x970 <EVENT_USB_Device_ControlRequest+0x1cc>
					else if (IsTMCBulkINReset)
					  TMCRequestStatus = TMC_STATUS_PENDING;
     96e:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     970:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     974:	97 7f       	andi	r25, 0xF7	; 247
     976:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     97a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     97e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
     982:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
					Endpoint_ClearSETUP();

					/* Write the request response bytes */
					Endpoint_Write_8(TMCRequestStatus);
					Endpoint_Write_16_LE(0);
					Endpoint_Write_32_LE(LastTransferLength);
     986:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <LastTransferLength>
     98a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <LastTransferLength+0x1>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
     98e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
     992:	a0 e0       	ldi	r26, 0x00	; 0
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	89 2f       	mov	r24, r25
     998:	9a 2f       	mov	r25, r26
     99a:	ab 2f       	mov	r26, r27
     99c:	bb 27       	eor	r27, r27
     99e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 16);
     9a2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     9a6:	34 c0       	rjmp	.+104    	; 0xa10 <__DATA_REGION_LENGTH__+0x10>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_InitiateClear:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9a8:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     9ac:	91 3a       	cpi	r25, 0xA1	; 161
     9ae:	09 f0       	breq	.+2      	; 0x9b2 <EVENT_USB_Device_ControlRequest+0x20e>
     9b0:	7f c0       	rjmp	.+254    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				{
					/* Check that no split transaction is already in progress */
					if (RequestInProgress != 0)
     9b2:	90 91 6c 01 	lds	r25, 0x016C	; 0x80016c <RequestInProgress>
     9b6:	99 23       	and	r25, r25
     9b8:	21 f0       	breq	.+8      	; 0x9c2 <EVENT_USB_Device_ControlRequest+0x21e>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9ba:	83 e8       	ldi	r24, 0x83	; 131
     9bc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     9c0:	67 c0       	rjmp	.+206    	; 0xa90 <__DATA_REGION_LENGTH__+0x90>
						Endpoint_Write_8(TMC_STATUS_SPLIT_IN_PROGRESS);
					}
					else
					{
						/* Indicate that all in-progress/pending data IN and OUT requests should be aborted */
						IsTMCBulkINReset  = true;
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <IsTMCBulkINReset>
						IsTMCBulkOUTReset = true;
     9c8:	90 93 6a 01 	sts	0x016A, r25	; 0x80016a <IsTMCBulkOUTReset>

						/* Save the split request for later checking when a new request is received */
						RequestInProgress = Req_InitiateClear;
     9cc:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <RequestInProgress>
     9d0:	5f c0       	rjmp	.+190    	; 0xa90 <__DATA_REGION_LENGTH__+0x90>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     9d2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     9d6:	81 3a       	cpi	r24, 0xA1	; 161
     9d8:	09 f0       	breq	.+2      	; 0x9dc <EVENT_USB_Device_ControlRequest+0x238>
     9da:	6a c0       	rjmp	.+212    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
     9dc:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <RequestInProgress>
     9e0:	85 30       	cpi	r24, 0x05	; 5
     9e2:	61 f4       	brne	.+24     	; 0x9fc <EVENT_USB_Device_ControlRequest+0x258>
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
     9e4:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     9e8:	81 11       	cpse	r24, r1
     9ea:	0a c0       	rjmp	.+20     	; 0xa00 <__DATA_REGION_LENGTH__>
     9ec:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     9f0:	81 11       	cpse	r24, r1
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <__DATA_REGION_LENGTH__>
						TMCRequestStatus = TMC_STATUS_PENDING;
					else
						RequestInProgress = 0;
     9f4:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <RequestInProgress>
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	uint8_t TMCRequestStatus = TMC_STATUS_SUCCESS;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	03 c0       	rjmp	.+6      	; 0xa02 <__DATA_REGION_LENGTH__+0x2>
			case Req_CheckClearStatus:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
				{
					/* Check that a CLEAR transaction has been requested and that the request has completed */
					if (RequestInProgress != Req_InitiateClear)
						TMCRequestStatus = TMC_STATUS_SPLIT_NOT_IN_PROGRESS;
     9fc:	82 e8       	ldi	r24, 0x82	; 130
     9fe:	01 c0       	rjmp	.+2      	; 0xa02 <__DATA_REGION_LENGTH__+0x2>
					else if (IsTMCBulkINReset || IsTMCBulkOUTReset)
						TMCRequestStatus = TMC_STATUS_PENDING;
     a00:	82 e0       	ldi	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a02:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a06:	97 7f       	andi	r25, 0xF7	; 247
     a08:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a0c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     a10:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
     a14:	45 c0       	rjmp	.+138    	; 0xaa0 <__DATA_REGION_LENGTH__+0xa0>
					Endpoint_ClearStatusStage();
				}

				break;
			case Req_GetCapabilities:
				if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     a16:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
     a1a:	81 3a       	cpi	r24, 0xA1	; 161
     a1c:	09 f0       	breq	.+2      	; 0xa20 <__DATA_REGION_LENGTH__+0x20>
     a1e:	48 c0       	rjmp	.+144    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a20:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a24:	87 7f       	andi	r24, 0xF7	; 247
     a26:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				{
					Endpoint_ClearSETUP();

					/* Write the device capabilities to the control endpoint */
					Endpoint_Write_Control_Stream_LE(&Capabilities, sizeof(TMC_Capabilities_t));
     a2a:	68 e1       	ldi	r22, 0x18	; 24
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	88 d7       	rcall	.+3856   	; 0x1944 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     a34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a38:	8b 77       	andi	r24, 0x7B	; 123
     a3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a3e:	38 c0       	rjmp	.+112    	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
				
				s_nextwrite_mightbeparameterset = true;
				break;

			case Req_RenControl:
				if ((USB_ControlRequest.wValue & 0xff) == 1)
     a40:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
     a44:	81 30       	cpi	r24, 0x01	; 1
				{
					gpib_ren(1);
				}
				else
				{
					gpib_ren(0);
     a46:	09 f0       	breq	.+2      	; 0xa4a <__DATA_REGION_LENGTH__+0x4a>
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	b1 d4       	rcall	.+2402   	; 0x13ae <gpib_ren>
     a4c:	21 c0       	rjmp	.+66     	; 0xa90 <__DATA_REGION_LENGTH__+0x90>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     a4e:	80 e5       	ldi	r24, 0x50	; 80
     a50:	93 ec       	ldi	r25, 0xC3	; 195
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	b0 e0       	ldi	r27, 0x00	; 0
     a56:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     a5a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     a5e:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     a62:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_LocalLockout:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_localLockout(is_timedout);
     a66:	84 e2       	ldi	r24, 0x24	; 36
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	7e d5       	rcall	.+2812   	; 0x1568 <gpib_localLockout>
     a6c:	11 c0       	rjmp	.+34     	; 0xa90 <__DATA_REGION_LENGTH__+0x90>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     a6e:	80 e5       	ldi	r24, 0x50	; 80
     a70:	93 ec       	ldi	r25, 0xC3	; 195
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     a7a:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     a7e:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     a82:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
			case Req_GoToLocal:
				timeout_start(50000); /* 0.5s timeout*/
				gpib_gotoLocal(gpib_addr, is_timedout);
     a86:	64 e2       	ldi	r22, 0x24	; 36
     a88:	71 e0       	ldi	r23, 0x01	; 1
     a8a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     a8e:	58 d5       	rcall	.+2736   	; 0x1540 <gpib_gotoLocal>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     a90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     a94:	87 7f       	andi	r24, 0xF7	; 247
     a96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     aa4:	8e 77       	andi	r24, 0x7E	; 126
     aa6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
				break;
		}
	}
}
     aaa:	cf 91       	pop	r28
				
				Endpoint_ClearSETUP();
				/* USBTMC Status response (1 Byte) */
				Endpoint_Write_8(TMC_STATUS_SUCCESS);
				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
     aac:	0c 94 0f 0e 	jmp	0x1c1e	; 0x1c1e <Endpoint_ClearStatusStage>
				break;
		}
	}
}
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <ProcessInternalCommand>:
					0x00 or 0xff => EOI termination
					0x01         => EOI or '\n' (LF = linefeed)
					0x02         => EOI or '\r' (CR = carriage return)
*/
void ProcessInternalCommand(uint8_t* const Data, uint8_t Length)
{
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
	uint8_t xx, yy;
	
	xx = charToval(Data[1])*16 + charToval(Data[2]);
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	b0 db       	rcall	.-2208   	; 0x222 <charToval>
     ac2:	18 2f       	mov	r17, r24
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	ad db       	rcall	.-2214   	; 0x222 <charToval>
     ac8:	90 e1       	ldi	r25, 0x10	; 16
     aca:	19 9f       	mul	r17, r25
     acc:	80 0d       	add	r24, r0
     ace:	11 24       	eor	r1, r1
     ad0:	18 2f       	mov	r17, r24
	yy = charToval(Data[3])*16 + charToval(Data[4]);
     ad2:	8b 81       	ldd	r24, Y+3	; 0x03
     ad4:	a6 db       	rcall	.-2228   	; 0x222 <charToval>
     ad6:	08 2f       	mov	r16, r24
     ad8:	8c 81       	ldd	r24, Y+4	; 0x04
     ada:	a3 db       	rcall	.-2234   	; 0x222 <charToval>
     adc:	68 2f       	mov	r22, r24
     ade:	90 e1       	ldi	r25, 0x10	; 16
     ae0:	09 9f       	mul	r16, r25
     ae2:	60 0d       	add	r22, r0
     ae4:	11 24       	eor	r1, r1
     ae6:	11 23       	and	r17, r17
	
	switch (xx)
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <ProcessInternalCommand+0x3c>
     aea:	11 30       	cpi	r17, 0x01	; 1
     aec:	41 f0       	breq	.+16     	; 0xafe <ProcessInternalCommand+0x4a>
     aee:	21 c0       	rjmp	.+66     	; 0xb32 <__stack+0x33>
     af0:	88 e6       	ldi	r24, 0x68	; 104
	{
		case 0x00: /* automatic detection y */
			eeprom_update_if_changed(104, yy);
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	df 91       	pop	r29
					gpib_set_readtermination('\0');
					break;
			}
			break;
	}
}
     af6:	cf 91       	pop	r28
     af8:	1f 91       	pop	r17
     afa:	0f 91       	pop	r16
	yy = charToval(Data[3])*16 + charToval(Data[4]);
	
	switch (xx)
	{
		case 0x00: /* automatic detection y */
			eeprom_update_if_changed(104, yy);
     afc:	06 ce       	rjmp	.-1012   	; 0x70a <eeprom_update_if_changed>
     afe:	61 30       	cpi	r22, 0x01	; 1
			break;
		case 0x01: /* select termination method */
			switch (yy)
     b00:	41 f0       	breq	.+16     	; 0xb12 <__stack+0x13>
     b02:	62 30       	cpi	r22, 0x02	; 2
     b04:	61 f4       	brne	.+24     	; 0xb1e <__stack+0x1f>
				case 0x01: /* \n */
					eeprom_update_if_changed(105, '\n');
					gpib_set_readtermination('\n');
					break;
				case 0x02: /* \r */
					eeprom_update_if_changed(105, '\r');
     b06:	6d e0       	ldi	r22, 0x0D	; 13
     b08:	89 e6       	ldi	r24, 0x69	; 105
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	fe dd       	rcall	.-1028   	; 0x70a <eeprom_update_if_changed>
					gpib_set_readtermination('\r');
     b0e:	8d e0       	ldi	r24, 0x0D	; 13
     b10:	0b c0       	rjmp	.+22     	; 0xb28 <__stack+0x29>
			break;
		case 0x01: /* select termination method */
			switch (yy)
			{
				case 0x01: /* \n */
					eeprom_update_if_changed(105, '\n');
     b12:	6a e0       	ldi	r22, 0x0A	; 10
     b14:	89 e6       	ldi	r24, 0x69	; 105
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	f8 dd       	rcall	.-1040   	; 0x70a <eeprom_update_if_changed>
					gpib_set_readtermination('\n');
     b1a:	8a e0       	ldi	r24, 0x0A	; 10
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <__stack+0x29>
				case 0x02: /* \r */
					eeprom_update_if_changed(105, '\r');
					gpib_set_readtermination('\r');
					break;
				default:
					eeprom_update_if_changed(105, '\0');
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	89 e6       	ldi	r24, 0x69	; 105
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	f2 dd       	rcall	.-1052   	; 0x70a <eeprom_update_if_changed>
					gpib_set_readtermination('\0');
     b26:	80 e0       	ldi	r24, 0x00	; 0
					break;
			}
			break;
	}
}
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
					eeprom_update_if_changed(105, '\r');
					gpib_set_readtermination('\r');
					break;
				default:
					eeprom_update_if_changed(105, '\0');
					gpib_set_readtermination('\0');
     b30:	0a c6       	rjmp	.+3092   	; 0x1746 <gpib_set_readtermination>
     b32:	df 91       	pop	r29
					break;
			}
			break;
	}
}
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	08 95       	ret

00000b3c <ProcessSentMessage>:
     b3c:	cf 92       	push	r12

void ProcessSentMessage(uint8_t* const Data, uint8_t Length, bool isFirstTransfer, bool isLastTransfer, gpibtimeout_t ptimeoutfunc)
{
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
     b4c:	7c 01       	movw	r14, r24
     b4e:	c6 2f       	mov	r28, r22
     b50:	d4 2e       	mov	r13, r20
     b52:	d2 2f       	mov	r29, r18
	uint8_t i, dat;
	bool timedout, isinternalcommand;
	
	
	/* check, if this is an internal command */ 
	isinternalcommand = isFirstTransfer && isFirstTransfer && s_nextwrite_mightbeparameterset && (Data[0] == '!');
     b54:	44 23       	and	r20, r20
     b56:	49 f0       	breq	.+18     	; 0xb6a <ProcessSentMessage+0x2e>
     b58:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <s_nextwrite_mightbeparameterset>
     b5c:	88 23       	and	r24, r24
     b5e:	29 f0       	breq	.+10     	; 0xb6a <ProcessSentMessage+0x2e>
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	f7 01       	movw	r30, r14
     b64:	90 81       	ld	r25, Z
     b66:	91 32       	cpi	r25, 0x21	; 33
     b68:	09 f0       	breq	.+2      	; 0xb6c <ProcessSentMessage+0x30>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
	if (isinternalcommand)
     b6c:	80 ff       	sbrs	r24, 0
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <ProcessSentMessage+0x3c>
	{
		ProcessInternalCommand(Data, Length);
     b70:	6c 2f       	mov	r22, r28
     b72:	c7 01       	movw	r24, r14
     b74:	9f df       	rcall	.-194    	; 0xab4 <ProcessInternalCommand>
     b76:	24 c0       	rjmp	.+72     	; 0xbc0 <ProcessSentMessage+0x84>
	}
	else
	{
		timedout = false;
		
		gpib_ren(1); /* ensure that remote control is enabled */
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	19 d4       	rcall	.+2098   	; 0x13ae <gpib_ren>
		
		LED(0);
     b7c:	5d 98       	cbi	0x0b, 5	; 11
		if (isFirstTransfer)
     b7e:	dd 20       	and	r13, r13
     b80:	29 f0       	breq	.+10     	; 0xb8c <ProcessSentMessage+0x50>
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
     b82:	b8 01       	movw	r22, r16
     b84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     b88:	b8 d5       	rcall	.+2928   	; 0x16fa <gpib_make_listener>
     b8a:	01 c0       	rjmp	.+2      	; 0xb8e <ProcessSentMessage+0x52>
	{
		ProcessInternalCommand(Data, Length);
	}
	else
	{
		timedout = false;
     b8c:	80 e0       	ldi	r24, 0x00	; 0
		i = 0;
		while ( (Length > 0) && !timedout)
		{
			Length--;
			dat = Data[i++];
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     b8e:	cd 2e       	mov	r12, r29
		LED(0);
		if (isFirstTransfer)
			timedout = gpib_make_listener(gpib_addr, ptimeoutfunc);
			
		i = 0;
		while ( (Length > 0) && !timedout)
     b90:	cc 23       	and	r28, r28
     b92:	79 f0       	breq	.+30     	; 0xbb2 <ProcessSentMessage+0x76>
     b94:	81 11       	cpse	r24, r1
     b96:	13 c0       	rjmp	.+38     	; 0xbbe <ProcessSentMessage+0x82>
		{
			Length--;
     b98:	c1 50       	subi	r28, 0x01	; 1
			dat = Data[i++];
     b9a:	f7 01       	movw	r30, r14
     b9c:	81 91       	ld	r24, Z+
     b9e:	7f 01       	movw	r14, r30
			timedout = gpib_writedat(dat, (Length == 0)  && isLastTransfer, ptimeoutfunc);
     ba0:	c1 11       	cpse	r28, r1
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <ProcessSentMessage+0x6c>
     ba4:	6c 2d       	mov	r22, r12
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <ProcessSentMessage+0x6e>
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	61 70       	andi	r22, 0x01	; 1
     bac:	a8 01       	movw	r20, r16
     bae:	c5 d5       	rcall	.+2954   	; 0x173a <gpib_writedat>
     bb0:	ef cf       	rjmp	.-34     	; 0xb90 <ProcessSentMessage+0x54>
		}
		
		if (isLastTransfer && !timedout) /* in case of timeout the interface is cleared within the writedat function, no need to untalk!*/
     bb2:	dd 23       	and	r29, r29
     bb4:	21 f0       	breq	.+8      	; 0xbbe <ProcessSentMessage+0x82>
     bb6:	81 11       	cpse	r24, r1
			gpib_untalk_unlisten(ptimeoutfunc);
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <ProcessSentMessage+0x82>
     bba:	c8 01       	movw	r24, r16
     bbc:	6e d5       	rcall	.+2780   	; 0x169a <gpib_untalk_unlisten>
		LED(1);
     bbe:	5d 9a       	sbi	0x0b, 5	; 11
	}
	s_nextwrite_mightbeparameterset = false;
     bc0:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <s_nextwrite_mightbeparameterset>
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	df 90       	pop	r13
     bd2:	cf 90       	pop	r12
     bd4:	08 95       	ret

00000bd6 <GetNextMessage>:

uint8_t GetNextMessage(uint8_t* const Data, uint8_t maxlen, bool isFirstMessage, bool *pisLastMessage, gpibtimeout_t ptimeoutfunc)
{
     bd6:	6f 92       	push	r6
     bd8:	7f 92       	push	r7
     bda:	8f 92       	push	r8
     bdc:	9f 92       	push	r9
     bde:	af 92       	push	r10
     be0:	bf 92       	push	r11
     be2:	cf 92       	push	r12
     be4:	df 92       	push	r13
     be6:	ff 92       	push	r15
     be8:	0f 93       	push	r16
     bea:	1f 93       	push	r17
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	00 d0       	rcall	.+0      	; 0xbf2 <GetNextMessage+0x1c>
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
     bf6:	5c 01       	movw	r10, r24
     bf8:	f6 2e       	mov	r15, r22
     bfa:	74 2e       	mov	r7, r20
     bfc:	49 01       	movw	r8, r18
     bfe:	68 01       	movw	r12, r16
	uint8_t c, i;
	bool    Eoi, timedout;
	
	gpib_ren(1); /* ensure that remote control is enabled */
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	d5 d3       	rcall	.+1962   	; 0x13ae <gpib_ren>
	
	LED(0);	
     c04:	5d 98       	cbi	0x0b, 5	; 11
	
	timedout = false;
     c06:	19 82       	std	Y+1, r1	; 0x01
	if (isFirstMessage)
     c08:	77 20       	and	r7, r7
     c0a:	29 f0       	breq	.+10     	; 0xc16 <GetNextMessage+0x40>
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);
     c0c:	b8 01       	movw	r22, r16
     c0e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     c12:	57 d5       	rcall	.+2734   	; 0x16c2 <gpib_make_talker>
     c14:	89 83       	std	Y+1, r24	; 0x01

	i = 0;
	Eoi = false;
     c16:	1a 82       	std	Y+2, r1	; 0x02
     c18:	87 e2       	ldi	r24, 0x27	; 39
     c1a:	68 2e       	mov	r6, r24
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	78 2e       	mov	r7, r24
	
	timedout = false;
	if (isFirstMessage)
		timedout = gpib_make_talker(gpib_addr, ptimeoutfunc);

	i = 0;
     c20:	10 e0       	ldi	r17, 0x00	; 0
	Eoi = false;

	while (!Eoi && (i < maxlen) && !timedout)
     c22:	9a 81       	ldd	r25, Y+2	; 0x02
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	91 11       	cpse	r25, r1
     c28:	13 c0       	rjmp	.+38     	; 0xc50 <GetNextMessage+0x7a>
     c2a:	f1 16       	cp	r15, r17
     c2c:	b1 f0       	breq	.+44     	; 0xc5a <GetNextMessage+0x84>
     c2e:	81 11       	cpse	r24, r1
     c30:	18 c0       	rjmp	.+48     	; 0xc62 <GetNextMessage+0x8c>
	{
	
		c = gpib_readdat(&Eoi, &timedout, ptimeoutfunc); 
     c32:	a6 01       	movw	r20, r12
     c34:	be 01       	movw	r22, r28
     c36:	6f 5f       	subi	r22, 0xFF	; 255
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	ce 01       	movw	r24, r28
     c3c:	02 96       	adiw	r24, 0x02	; 2
     c3e:	9f d4       	rcall	.+2366   	; 0x157e <gpib_readdat>
		if (!timedout)
     c40:	99 81       	ldd	r25, Y+1	; 0x01
     c42:	91 11       	cpse	r25, r1
     c44:	ee cf       	rjmp	.-36     	; 0xc22 <GetNextMessage+0x4c>
			NextResponseBuffer[i++] = c;
     c46:	1f 5f       	subi	r17, 0xFF	; 255
     c48:	f3 01       	movw	r30, r6
     c4a:	81 93       	st	Z+, r24
     c4c:	3f 01       	movw	r6, r30
     c4e:	e9 cf       	rjmp	.-46     	; 0xc22 <GetNextMessage+0x4c>
	}
		
	if (Eoi && !timedout) /* in case of timeout, no need to unlisten => interface clear done in readdat function! */
     c50:	81 11       	cpse	r24, r1
		gpib_untalk_unlisten(ptimeoutfunc);
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <GetNextMessage+0x8c>
     c54:	c6 01       	movw	r24, r12
     c56:	21 d5       	rcall	.+2626   	; 0x169a <gpib_untalk_unlisten>
     c58:	f1 2e       	mov	r15, r17

	if (timedout) /* in case of timedout, simulate an end of message */
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	88 23       	and	r24, r24
     c5e:	21 f0       	breq	.+8      	; 0xc68 <GetNextMessage+0x92>
     c60:	1f 2d       	mov	r17, r15
		Eoi = true;
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	8a 83       	std	Y+2, r24	; 0x02
     c66:	f1 2e       	mov	r15, r17
	*pisLastMessage = Eoi;
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	f4 01       	movw	r30, r8
     c6c:	80 83       	st	Z, r24
	
//NextResponseBuffer[i++]	= gpib_search();

	memcpy((char*)Data, (char*)NextResponseBuffer, i);
     c6e:	4f 2d       	mov	r20, r15
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	67 e2       	ldi	r22, 0x27	; 39
     c74:	71 e0       	ldi	r23, 0x01	; 1
     c76:	c5 01       	movw	r24, r10
     c78:	0e 94 2c 11 	call	0x2258	; 0x2258 <memcpy>
	
	LED(1);
     c7c:	5d 9a       	sbi	0x0b, 5	; 11

	return i;
}
     c7e:	8f 2d       	mov	r24, r15
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	df 90       	pop	r13
     c90:	cf 90       	pop	r12
     c92:	bf 90       	pop	r11
     c94:	af 90       	pop	r10
     c96:	9f 90       	pop	r9
     c98:	8f 90       	pop	r8
     c9a:	7f 90       	pop	r7
     c9c:	6f 90       	pop	r6
     c9e:	08 95       	ret

00000ca0 <TMC_resetstates>:
bool TMC_eom;
bool TMC_InLastMessageComplete = true;

void TMC_resetstates(void)
{
	TMC_LastMessageComplete = true;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
	TMC_InLastMessageComplete = true;
     ca6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	s_remaining_bytes_receive = 0;
     caa:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <s_remaining_bytes_receive>
     cae:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <s_remaining_bytes_receive+0x1>
     cb2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <s_remaining_bytes_receive+0x2>
     cb6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <s_remaining_bytes_receive+0x3>
	gpib_interface_clear();
     cba:	7f c3       	rjmp	.+1790   	; 0x13ba <gpib_interface_clear>

00000cbc <ReadTMCHeader>:
 *  \param[out] MessageHeader  Pointer to a location where the read header (if any) should be stored
 *
 *  \return Boolean \c true if a header was read, \c false otherwise
 */
bool ReadTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <ReadTMCHeader+0xa>
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cca:	23 e0       	ldi	r18, 0x03	; 3
     ccc:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     cd0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
     cd4:	22 ff       	sbrs	r18, 2
     cd6:	1c c0       	rjmp	.+56     	; 0xd10 <ReadTMCHeader+0x54>
     cd8:	8c 01       	movw	r16, r24
	  return false;

	/* Read in the header of the command from the host */
	BytesTransferred = 0;
     cda:	1a 82       	std	Y+2, r1	; 0x02
     cdc:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Read_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     cde:	ae 01       	movw	r20, r28
     ce0:	4f 5f       	subi	r20, 0xFF	; 255
     ce2:	5f 4f       	sbci	r21, 0xFF	; 255
     ce4:	6c e0       	ldi	r22, 0x0C	; 12
     ce6:	70 e0       	ldi	r23, 0x00	; 0
     ce8:	c8 01       	movw	r24, r16
     cea:	e3 d5       	rcall	.+3014   	; 0x18b2 <Endpoint_Read_Stream_LE>
     cec:	98 2f       	mov	r25, r24
     cee:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     cf2:	95 30       	cpi	r25, 0x05	; 5
     cf4:	11 f4       	brne	.+4      	; 0xcfa <ReadTMCHeader+0x3e>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkOUTReset)
     cf6:	88 23       	and	r24, r24
     cf8:	91 f3       	breq	.-28     	; 0xcde <ReadTMCHeader+0x22>
		  break;
	}

	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;
     cfa:	f8 01       	movw	r30, r16
     cfc:	21 81       	ldd	r18, Z+1	; 0x01
     cfe:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <CurrentTransferTag>

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     d02:	81 11       	cpse	r24, r1
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <ReadTMCHeader+0x4e>
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	91 11       	cpse	r25, r1
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	81 70       	andi	r24, 0x01	; 1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <ReadTMCHeader+0x56>
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

	/* Abort if no command has been sent from the host */
	if (!(Endpoint_IsOUTReceived()))
	  return false;
     d10:	80 e0       	ldi	r24, 0x00	; 0
	/* Store the new command tag value for later use */
	CurrentTransferTag = MessageHeader->Tag;

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkOUTReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
}
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	1f 91       	pop	r17
     d1c:	0f 91       	pop	r16
     d1e:	08 95       	ret

00000d20 <WriteTMCHeader>:

bool WriteTMCHeader(TMC_MessageHeader_t* const MessageHeader)
{
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
     d28:	00 d0       	rcall	.+0      	; 0xd2a <WriteTMCHeader+0xa>
     d2a:	cd b7       	in	r28, 0x3d	; 61
     d2c:	de b7       	in	r29, 0x3e	; 62
     d2e:	8c 01       	movw	r16, r24
	uint16_t BytesTransferred;
	uint8_t  ErrorCode;

	/* Set the message tag of the command header */
	MessageHeader->Tag        =  CurrentTransferTag;
     d30:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <CurrentTransferTag>
     d34:	f8 01       	movw	r30, r16
     d36:	81 83       	std	Z+1, r24	; 0x01
	MessageHeader->InverseTag = ~CurrentTransferTag;
     d38:	80 95       	com	r24
     d3a:	82 83       	std	Z+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     d3c:	82 e0       	ldi	r24, 0x02	; 2
     d3e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(TMC_IN_EPADDR);

	/* Send the command header to the host */
	BytesTransferred = 0;
     d42:	1a 82       	std	Y+2, r1	; 0x02
     d44:	19 82       	std	Y+1, r1	; 0x01
	while ((ErrorCode = Endpoint_Write_Stream_LE(MessageHeader, sizeof(TMC_MessageHeader_t), &BytesTransferred)) ==
     d46:	ae 01       	movw	r20, r28
     d48:	4f 5f       	subi	r20, 0xFF	; 255
     d4a:	5f 4f       	sbci	r21, 0xFF	; 255
     d4c:	6c e0       	ldi	r22, 0x0C	; 12
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	c8 01       	movw	r24, r16
     d52:	66 d5       	rcall	.+2764   	; 0x1820 <Endpoint_Write_Stream_LE>
     d54:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <IsTMCBulkINReset>
     d58:	85 30       	cpi	r24, 0x05	; 5
     d5a:	11 f4       	brne	.+4      	; 0xd60 <WriteTMCHeader+0x40>
	       ENDPOINT_RWSTREAM_IncompleteTransfer)
	{
		if (IsTMCBulkINReset)
     d5c:	99 23       	and	r25, r25
     d5e:	99 f3       	breq	.-26     	; 0xd46 <WriteTMCHeader+0x26>
		  break;
	}

	/* Indicate if the command has been aborted or not */
	return (!(IsTMCBulkINReset) && (ErrorCode == ENDPOINT_RWSTREAM_NoError));
     d60:	91 11       	cpse	r25, r1
     d62:	05 c0       	rjmp	.+10     	; 0xd6e <WriteTMCHeader+0x4e>
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	81 11       	cpse	r24, r1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	89 2f       	mov	r24, r25
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <WriteTMCHeader+0x50>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
}
     d70:	81 70       	andi	r24, 0x01	; 1
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	08 95       	ret

00000d80 <TMC_Task>:
//	gpib_untalk_unlisten();
}

/** Function to manage TMC data transmission and reception to and from the host. */
void TMC_Task(void)
{
     d80:	bf 92       	push	r11
     d82:	cf 92       	push	r12
     d84:	df 92       	push	r13
     d86:	ef 92       	push	r14
     d88:	ff 92       	push	r15
     d8a:	0f 93       	push	r16
     d8c:	1f 93       	push	r17
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	cd 58       	subi	r28, 0x8D	; 141
     d98:	d1 09       	sbc	r29, r1
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
	bool lastmessage;
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     da4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
     da8:	84 30       	cpi	r24, 0x04	; 4
     daa:	09 f0       	breq	.+2      	; 0xdae <TMC_Task+0x2e>
     dac:	9d c1       	rjmp	.+826    	; 0x10e8 <TMC_Task+0x368>
	TMC_MessageHeader_t MessageHeader;
	uint8_t             MessagePayload[128], curlen;
	
	

	if (s_remaining_bytes_receive == 0)
     dae:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     db2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     db6:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     dba:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     dbe:	89 2b       	or	r24, r25
     dc0:	8a 2b       	or	r24, r26
     dc2:	8b 2b       	or	r24, r27
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <TMC_Task+0x48>
     dc6:	20 c1       	rjmp	.+576    	; 0x1008 <TMC_Task+0x288>
	{
	
		/* Try to read in a TMC message from the interface, process if one is available */
		if (ReadTMCHeader(&MessageHeader))
     dc8:	ce 01       	movw	r24, r28
     dca:	8f 57       	subi	r24, 0x7F	; 127
     dcc:	9f 4f       	sbci	r25, 0xFF	; 255
     dce:	76 df       	rcall	.-276    	; 0xcbc <ReadTMCHeader>
     dd0:	88 23       	and	r24, r24
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <TMC_Task+0x56>
     dd4:	7d c1       	rjmp	.+762    	; 0x10d0 <TMC_Task+0x350>
		{
		dbg++;
     dd6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     dda:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     dde:	01 96       	adiw	r24, 0x01	; 1
     de0:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
     de4:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
		
			/* Indicate busy */
			//LEDs_SetAllLEDs(LEDMASK_USB_BUSY);

			switch (MessageHeader.MessageID)
     de8:	cf 57       	subi	r28, 0x7F	; 127
     dea:	df 4f       	sbci	r29, 0xFF	; 255
     dec:	88 81       	ld	r24, Y
     dee:	c1 58       	subi	r28, 0x81	; 129
     df0:	d0 40       	sbci	r29, 0x00	; 0
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	09 f4       	brne	.+2      	; 0xdf8 <TMC_Task+0x78>
     df6:	9e c0       	rjmp	.+316    	; 0xf34 <TMC_Task+0x1b4>
     df8:	80 38       	cpi	r24, 0x80	; 128
     dfa:	21 f0       	breq	.+8      	; 0xe04 <TMC_Task+0x84>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f0       	breq	.+2      	; 0xe02 <TMC_Task+0x82>
     e00:	fd c0       	rjmp	.+506    	; 0xffc <TMC_Task+0x27c>
     e02:	17 c0       	rjmp	.+46     	; 0xe32 <TMC_Task+0xb2>

uint32_t timeout_val;

void timeout_start(uint32_t timeout)
{
	timeout_val = timeout;
     e04:	80 e5       	ldi	r24, 0x50	; 80
     e06:	93 ec       	ldi	r25, 0xC3	; 195
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <timeout_val>
     e10:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <timeout_val+0x1>
     e14:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <timeout_val+0x2>
     e18:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <timeout_val+0x3>

			switch (MessageHeader.MessageID)
			{
				case TMC_MESSAGEID_TRIGGER:
					timeout_start(50000); /* 0.5s timeout*/
					gpib_trigger(gpib_addr, is_timedout);
     e1c:	64 e2       	ldi	r22, 0x24	; 36
     e1e:	71 e0       	ldi	r23, 0x01	; 1
     e20:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
     e24:	78 d3       	rcall	.+1776   	; 0x1516 <gpib_trigger>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     e26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e2a:	8b 77       	andi	r24, 0x7B	; 123
     e2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     e30:	4f c1       	rjmp	.+670    	; 0x10d0 <TMC_Task+0x350>
					Endpoint_ClearOUT();					
					break;
				case TMC_MESSAGEID_DEV_DEP_MSG_OUT:
					s_remaining_bytes_receive = MessageHeader.TransferSize;
     e32:	cb 57       	subi	r28, 0x7B	; 123
     e34:	df 4f       	sbci	r29, 0xFF	; 255
     e36:	38 81       	ld	r19, Y
     e38:	c5 58       	subi	r28, 0x85	; 133
     e3a:	d0 40       	sbci	r29, 0x00	; 0
     e3c:	ca 57       	subi	r28, 0x7A	; 122
     e3e:	df 4f       	sbci	r29, 0xFF	; 255
     e40:	28 81       	ld	r18, Y
     e42:	c6 58       	subi	r28, 0x86	; 134
     e44:	d0 40       	sbci	r29, 0x00	; 0
     e46:	c9 57       	subi	r28, 0x79	; 121
     e48:	df 4f       	sbci	r29, 0xFF	; 255
     e4a:	98 81       	ld	r25, Y
     e4c:	c7 58       	subi	r28, 0x87	; 135
     e4e:	d0 40       	sbci	r29, 0x00	; 0
     e50:	c8 57       	subi	r28, 0x78	; 120
     e52:	df 4f       	sbci	r29, 0xFF	; 255
     e54:	88 81       	ld	r24, Y
     e56:	c8 58       	subi	r28, 0x88	; 136
     e58:	d0 40       	sbci	r29, 0x00	; 0
     e5a:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <s_remaining_bytes_receive>
     e5e:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <s_remaining_bytes_receive+0x1>
     e62:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <s_remaining_bytes_receive+0x2>
     e66:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <s_remaining_bytes_receive+0x3>
					
					LastTransferLength = 0;
     e6a:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
     e6e:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t), MessageHeader.TransferSize);
     e72:	c3 2e       	mov	r12, r19
     e74:	d2 2e       	mov	r13, r18
     e76:	e9 2e       	mov	r14, r25
     e78:	f8 2e       	mov	r15, r24
     e7a:	85 e3       	ldi	r24, 0x35	; 53
     e7c:	c8 16       	cp	r12, r24
     e7e:	d1 04       	cpc	r13, r1
     e80:	e1 04       	cpc	r14, r1
     e82:	f1 04       	cpc	r15, r1
     e84:	28 f0       	brcs	.+10     	; 0xe90 <TMC_Task+0x110>
     e86:	94 e3       	ldi	r25, 0x34	; 52
     e88:	c9 2e       	mov	r12, r25
     e8a:	d1 2c       	mov	r13, r1
     e8c:	e1 2c       	mov	r14, r1
     e8e:	f1 2c       	mov	r15, r1
     e90:	bc 2c       	mov	r11, r12
					//
					while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
     e92:	47 e6       	ldi	r20, 0x67	; 103
     e94:	51 e0       	ldi	r21, 0x01	; 1
     e96:	b6 01       	movw	r22, r12
     e98:	ce 01       	movw	r24, r28
     e9a:	01 96       	adiw	r24, 0x01	; 1
     e9c:	0a d5       	rcall	.+2580   	; 0x18b2 <Endpoint_Read_Stream_LE>
     e9e:	85 30       	cpi	r24, 0x05	; 5
     ea0:	21 f4       	brne	.+8      	; 0xeaa <TMC_Task+0x12a>
						   ENDPOINT_RWSTREAM_IncompleteTransfer)
					{
						if (IsTMCBulkOUTReset)
     ea2:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
     ea6:	88 23       	and	r24, r24
     ea8:	a1 f3       	breq	.-24     	; 0xe92 <TMC_Task+0x112>
						  break;
					}					
					
					s_remaining_bytes_receive -= curlen;
     eaa:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
     eae:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
     eb2:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
     eb6:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
     eba:	8c 19       	sub	r24, r12
     ebc:	9d 09       	sbc	r25, r13
     ebe:	ae 09       	sbc	r26, r14
     ec0:	bf 09       	sbc	r27, r15
     ec2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
     ec6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
     eca:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
     ece:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>
					
					TMC_eom = (MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction != 0);
     ed2:	c7 57       	subi	r28, 0x77	; 119
     ed4:	df 4f       	sbci	r29, 0xFF	; 255
     ed6:	28 81       	ld	r18, Y
     ed8:	c9 58       	subi	r28, 0x89	; 137
     eda:	d0 40       	sbci	r29, 0x00	; 0
     edc:	31 e0       	ldi	r19, 0x01	; 1
     ede:	21 11       	cpse	r18, r1
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <TMC_Task+0x164>
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <TMC_eom>
					lastmessage =  TMC_eom && (s_remaining_bytes_receive==0);
     ee8:	22 23       	and	r18, r18
     eea:	29 f0       	breq	.+10     	; 0xef6 <TMC_Task+0x176>
     eec:	21 e0       	ldi	r18, 0x01	; 1
     eee:	89 2b       	or	r24, r25
     ef0:	8a 2b       	or	r24, r26
     ef2:	8b 2b       	or	r24, r27
     ef4:	09 f0       	breq	.+2      	; 0xef8 <TMC_Task+0x178>
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	21 70       	andi	r18, 0x01	; 1
     efa:	c3 57       	subi	r28, 0x73	; 115
     efc:	df 4f       	sbci	r29, 0xFF	; 255
     efe:	28 83       	st	Y, r18
     f00:	cd 58       	subi	r28, 0x8D	; 141
     f02:	d0 40       	sbci	r29, 0x00	; 0
					ProcessSentMessage(MessagePayload, curlen, TMC_LastMessageComplete, lastmessage, tmc_gpib_write_timedout);
     f04:	03 e4       	ldi	r16, 0x43	; 67
     f06:	11 e0       	ldi	r17, 0x01	; 1
     f08:	40 91 01 01 	lds	r20, 0x0101	; 0x800101 <TMC_LastMessageComplete>
     f0c:	6b 2d       	mov	r22, r11
     f0e:	ce 01       	movw	r24, r28
     f10:	01 96       	adiw	r24, 0x01	; 1
     f12:	14 de       	rcall	.-984    	; 0xb3c <ProcessSentMessage>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     f1a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f1e:	8b 77       	andi	r24, 0x7B	; 123
     f20:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
					
					/* Select the Data Out endpoint, this has to be done because the timeout function cal select the control endpoint */
					Endpoint_SelectEndpoint(TMC_OUT_EPADDR);
					Endpoint_ClearOUT();
					
					TMC_LastMessageComplete = lastmessage;
     f24:	c3 57       	subi	r28, 0x73	; 115
     f26:	df 4f       	sbci	r29, 0xFF	; 255
     f28:	88 81       	ld	r24, Y
     f2a:	cd 58       	subi	r28, 0x8D	; 141
     f2c:	d0 40       	sbci	r29, 0x00	; 0
     f2e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <TMC_LastMessageComplete>
					break;
     f32:	ce c0       	rjmp	.+412    	; 0x10d0 <TMC_Task+0x350>
     f34:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     f38:	8b 77       	andi	r24, 0x7B	; 123
     f3a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				case TMC_MESSAGEID_DEV_DEP_MSG_IN:
					Endpoint_ClearOUT();
//FIXME: ZLP not OK! -------------------------------------------------------v
					curlen = MIN(TMC_IO_EPSIZE-sizeof(TMC_MessageHeader_t) -1, MessageHeader.TransferSize);
					MessageHeader.TransferSize = GetNextMessage(MessagePayload, curlen, TMC_InLastMessageComplete, &lastmessage, tmc_gpib_read_timedout);
     f3e:	cb 57       	subi	r28, 0x7B	; 123
     f40:	df 4f       	sbci	r29, 0xFF	; 255
     f42:	68 81       	ld	r22, Y
     f44:	79 81       	ldd	r23, Y+1	; 0x01
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	c5 58       	subi	r28, 0x85	; 133
     f4c:	d0 40       	sbci	r29, 0x00	; 0
     f4e:	64 33       	cpi	r22, 0x34	; 52
     f50:	71 05       	cpc	r23, r1
     f52:	81 05       	cpc	r24, r1
     f54:	91 05       	cpc	r25, r1
     f56:	20 f0       	brcs	.+8      	; 0xf60 <TMC_Task+0x1e0>
     f58:	63 e3       	ldi	r22, 0x33	; 51
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0b e4       	ldi	r16, 0x4B	; 75
     f62:	11 e0       	ldi	r17, 0x01	; 1
     f64:	9e 01       	movw	r18, r28
     f66:	23 57       	subi	r18, 0x73	; 115
     f68:	3f 4f       	sbci	r19, 0xFF	; 255
     f6a:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f6e:	ce 01       	movw	r24, r28
     f70:	01 96       	adiw	r24, 0x01	; 1
     f72:	31 de       	rcall	.-926    	; 0xbd6 <GetNextMessage>
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	a0 e0       	ldi	r26, 0x00	; 0
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	cb 57       	subi	r28, 0x7B	; 123
     f7c:	df 4f       	sbci	r29, 0xFF	; 255
     f7e:	88 83       	st	Y, r24
     f80:	99 83       	std	Y+1, r25	; 0x01
     f82:	aa 83       	std	Y+2, r26	; 0x02
     f84:	bb 83       	std	Y+3, r27	; 0x03
     f86:	c5 58       	subi	r28, 0x85	; 133
     f88:	d0 40       	sbci	r29, 0x00	; 0
					TMC_InLastMessageComplete = lastmessage;
     f8a:	c3 57       	subi	r28, 0x73	; 115
     f8c:	df 4f       	sbci	r29, 0xFF	; 255
     f8e:	88 81       	ld	r24, Y
     f90:	cd 58       	subi	r28, 0x8D	; 141
     f92:	d0 40       	sbci	r29, 0x00	; 0
     f94:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
					
					MessageHeader.MessageIDSpecific.DeviceOUT.LastMessageTransaction = lastmessage;
     f98:	c7 57       	subi	r28, 0x77	; 119
     f9a:	df 4f       	sbci	r29, 0xFF	; 255
     f9c:	88 83       	st	Y, r24
     f9e:	c9 58       	subi	r28, 0x89	; 137
     fa0:	d0 40       	sbci	r29, 0x00	; 0
					if (!IsTMCBulkINReset)
     fa2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     fa6:	81 11       	cpse	r24, r1
						WriteTMCHeader(&MessageHeader);					
     fa8:	04 c0       	rjmp	.+8      	; 0xfb2 <TMC_Task+0x232>
     faa:	ce 01       	movw	r24, r28
     fac:	8f 57       	subi	r24, 0x7F	; 127
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	b7 de       	rcall	.-658    	; 0xd20 <WriteTMCHeader>
					
					LastTransferLength = 0;
     fb2:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
     fb6:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>
					if (!IsTMCBulkINReset)
     fba:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     fbe:	88 23       	and	r24, r24
     fc0:	79 f0       	breq	.+30     	; 0xfe0 <TMC_Task+0x260>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fc8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
     fcc:	8e 77       	andi	r24, 0x7E	; 126
     fce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

					/* Also in case of a timeout, the host does not expire a Bulk IN IRP, so we still need to commit an empty endpoint to retire the IRP */
					Endpoint_SelectEndpoint(TMC_IN_EPADDR);
					Endpoint_ClearIN();
					
					if (IsTMCBulkINReset)
     fd2:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
     fd6:	88 23       	and	r24, r24
     fd8:	09 f4       	brne	.+2      	; 0xfdc <TMC_Task+0x25c>
					{
						//Endpoint_SelectEndpoint(TMC_IN_EPADDR);
						//Endpoint_AbortPendingIN();
						/* KG: Added for proper synchronsity handling */
						//Endpoint_ResetEndpoint(TMC_IN_EPADDR);
						TMC_resetstates();
     fda:	7a c0       	rjmp	.+244    	; 0x10d0 <TMC_Task+0x350>
     fdc:	61 de       	rcall	.-830    	; 0xca0 <TMC_resetstates>
     fde:	78 c0       	rjmp	.+240    	; 0x10d0 <TMC_Task+0x350>
						WriteTMCHeader(&MessageHeader);					
					
					LastTransferLength = 0;
					if (!IsTMCBulkINReset)
					{
						while (Endpoint_Write_Stream_LE(MessagePayload, MessageHeader.TransferSize, &LastTransferLength) ==
     fe0:	cb 57       	subi	r28, 0x7B	; 123
     fe2:	df 4f       	sbci	r29, 0xFF	; 255
     fe4:	68 81       	ld	r22, Y
     fe6:	79 81       	ldd	r23, Y+1	; 0x01
     fe8:	c5 58       	subi	r28, 0x85	; 133
     fea:	d0 40       	sbci	r29, 0x00	; 0
     fec:	47 e6       	ldi	r20, 0x67	; 103
     fee:	51 e0       	ldi	r21, 0x01	; 1
     ff0:	ce 01       	movw	r24, r28
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	15 d4       	rcall	.+2090   	; 0x1820 <Endpoint_Write_Stream_LE>
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	01 f3       	breq	.-64     	; 0xfba <TMC_Task+0x23a>
     ffa:	e3 cf       	rjmp	.-58     	; 0xfc2 <TMC_Task+0x242>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     ffc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1000:	80 62       	ori	r24, 0x20	; 32
    1002:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1006:	64 c0       	rjmp	.+200    	; 0x10d0 <TMC_Task+0x350>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    100e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	
			/* Select the Data Out endpoint */
		Endpoint_SelectEndpoint(TMC_OUT_EPADDR);

		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
    1012:	82 ff       	sbrs	r24, 2
    1014:	5d c0       	rjmp	.+186    	; 0x10d0 <TMC_Task+0x350>
		{
			LastTransferLength = 0;
    1016:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <LastTransferLength+0x1>
    101a:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <LastTransferLength>
			
			curlen = TMC_IO_EPSIZE;
			if (s_remaining_bytes_receive < TMC_IO_EPSIZE)
    101e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    1022:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    1026:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    102a:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    102e:	80 34       	cpi	r24, 0x40	; 64
    1030:	91 05       	cpc	r25, r1
    1032:	a1 05       	cpc	r26, r1
    1034:	b1 05       	cpc	r27, r1
    1036:	10 f4       	brcc	.+4      	; 0x103c <TMC_Task+0x2bc>
			{
				curlen = s_remaining_bytes_receive;
    1038:	f8 2e       	mov	r15, r24
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <TMC_Task+0x2c0>
		/* Abort if no command has been sent from the host */
		if (Endpoint_IsOUTReceived())
		{
			LastTransferLength = 0;
			
			curlen = TMC_IO_EPSIZE;
    103c:	80 e4       	ldi	r24, 0x40	; 64
			{
				curlen = s_remaining_bytes_receive;
			}
			
			//
			while (Endpoint_Read_Stream_LE(MessagePayload, curlen, &LastTransferLength) ==
    103e:	f8 2e       	mov	r15, r24
    1040:	cf 2c       	mov	r12, r15
    1042:	d1 2c       	mov	r13, r1
    1044:	47 e6       	ldi	r20, 0x67	; 103
    1046:	51 e0       	ldi	r21, 0x01	; 1
    1048:	b6 01       	movw	r22, r12
    104a:	ce 01       	movw	r24, r28
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	31 d4       	rcall	.+2146   	; 0x18b2 <Endpoint_Read_Stream_LE>
    1050:	85 30       	cpi	r24, 0x05	; 5
    1052:	21 f4       	brne	.+8      	; 0x105c <TMC_Task+0x2dc>
				   ENDPOINT_RWSTREAM_IncompleteTransfer)
			{
				if (IsTMCBulkOUTReset)
    1054:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
    1058:	88 23       	and	r24, r24
    105a:	a1 f3       	breq	.-24     	; 0x1044 <TMC_Task+0x2c4>
				  break;
			}
			s_remaining_bytes_receive -= curlen;
    105c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    1060:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    1064:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    1068:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    106c:	8f 19       	sub	r24, r15
    106e:	91 09       	sbc	r25, r1
    1070:	a1 09       	sbc	r26, r1
    1072:	b1 09       	sbc	r27, r1
    1074:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <s_remaining_bytes_receive>
    1078:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <s_remaining_bytes_receive+0x1>
    107c:	a0 93 24 01 	sts	0x0124, r26	; 0x800124 <s_remaining_bytes_receive+0x2>
    1080:	b0 93 25 01 	sts	0x0125, r27	; 0x800125 <s_remaining_bytes_receive+0x3>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1084:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1088:	8b 77       	andi	r24, 0x7B	; 123
    108a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

			Endpoint_ClearOUT();
			
			lastmessage = TMC_eom && (s_remaining_bytes_receive==0);
    108e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <TMC_eom>
    1092:	88 23       	and	r24, r24
    1094:	69 f0       	breq	.+26     	; 0x10b0 <TMC_Task+0x330>
    1096:	21 e0       	ldi	r18, 0x01	; 1
    1098:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <s_remaining_bytes_receive>
    109c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <s_remaining_bytes_receive+0x1>
    10a0:	a0 91 24 01 	lds	r26, 0x0124	; 0x800124 <s_remaining_bytes_receive+0x2>
    10a4:	b0 91 25 01 	lds	r27, 0x0125	; 0x800125 <s_remaining_bytes_receive+0x3>
    10a8:	89 2b       	or	r24, r25
    10aa:	8a 2b       	or	r24, r26
    10ac:	8b 2b       	or	r24, r27
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <TMC_Task+0x332>
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	21 70       	andi	r18, 0x01	; 1
    10b4:	c3 57       	subi	r28, 0x73	; 115
    10b6:	df 4f       	sbci	r29, 0xFF	; 255
    10b8:	28 83       	st	Y, r18
    10ba:	cd 58       	subi	r28, 0x8D	; 141
			TMC_LastMessageComplete = lastmessage;
    10bc:	d0 40       	sbci	r29, 0x00	; 0
    10be:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <TMC_LastMessageComplete>
			ProcessSentMessage(MessagePayload, curlen, false, lastmessage, tmc_gpib_write_timedout);
    10c2:	03 e4       	ldi	r16, 0x43	; 67
    10c4:	11 e0       	ldi	r17, 0x01	; 1
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	6f 2d       	mov	r22, r15
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
		}
	}

	if (IsTMCBulkOUTReset || IsTMCBulkINReset)
    10ce:	36 dd       	rcall	.-1428   	; 0xb3c <ProcessSentMessage>
    10d0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <IsTMCBulkOUTReset>
    10d4:	81 11       	cpse	r24, r1
    10d6:	03 c0       	rjmp	.+6      	; 0x10de <TMC_Task+0x35e>
    10d8:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <IsTMCBulkINReset>
		TMC_resetstates();
    10dc:	81 11       	cpse	r24, r1
    10de:	e0 dd       	rcall	.-1088   	; 0xca0 <TMC_resetstates>
	
	/* All pending data has been processed - reset the data abort flags */
	IsTMCBulkINReset  = false;
    10e0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <IsTMCBulkINReset>
	IsTMCBulkOUTReset = false;
    10e4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <IsTMCBulkOUTReset>
}
    10e8:	c3 57       	subi	r28, 0x73	; 115
    10ea:	df 4f       	sbci	r29, 0xFF	; 255
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	df 91       	pop	r29
    10f8:	cf 91       	pop	r28
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	08 95       	ret

0000110a <main>:
int main(void)
{
	uint8_t prevaddr;

	//mcusr_mirror = MCUSR; 
	MCUSR = 0; 
    110a:	14 be       	out	0x34, r1	; 52
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	a8 95       	wdr
    1112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1116:	88 61       	ori	r24, 0x18	; 24
    1118:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    111c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1120:	0f be       	out	0x3f, r0	; 63
	wdt_disable(); 

	SetupHardware();
    1122:	0c db       	rcall	.-2536   	; 0x73c <SetupHardware>
	
	gpib_init();
    1124:	5e d1       	rcall	.+700    	; 0x13e2 <gpib_init>
    1126:	f9 99       	sbic	0x1f, 1	; 31
	
	/* apply settings from eeprom */
	eeprom_busy_wait();	
    1128:	fe cf       	rjmp	.-4      	; 0x1126 <main+0x1c>
    112a:	89 e6       	ldi	r24, 0x69	; 105
	gpib_set_readtermination(eeprom_read_byte(105));
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 35 11 	call	0x226a	; 0x226a <eeprom_read_byte>
    1132:	09 d3       	rcall	.+1554   	; 0x1746 <gpib_set_readtermination>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1134:	78 94       	sei
	
	
	//LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
	GlobalInterruptEnable();
	
	while (!gpib_is_connected())
    1136:	34 d1       	rcall	.+616    	; 0x13a0 <gpib_is_connected>
    1138:	81 11       	cpse	r24, r1
    113a:	15 c0       	rjmp	.+42     	; 0x1166 <main+0x5c>
    113c:	2f ef       	ldi	r18, 0xFF	; 255
    113e:	84 e3       	ldi	r24, 0x34	; 52
    1140:	9c e0       	ldi	r25, 0x0C	; 12
    1142:	21 50       	subi	r18, 0x01	; 1
    1144:	80 40       	sbci	r24, 0x00	; 0
    1146:	90 40       	sbci	r25, 0x00	; 0
    1148:	e1 f7       	brne	.-8      	; 0x1142 <main+0x38>
    114a:	00 c0       	rjmp	.+0      	; 0x114c <main+0x42>
    114c:	00 00       	nop
    114e:	5d 9a       	sbi	0x0b, 5	; 11
	{
		_delay_ms(250);
		LED(1);
    1150:	ef ef       	ldi	r30, 0xFF	; 255
    1152:	f4 e3       	ldi	r31, 0x34	; 52
    1154:	2c e0       	ldi	r18, 0x0C	; 12
    1156:	e1 50       	subi	r30, 0x01	; 1
    1158:	f0 40       	sbci	r31, 0x00	; 0
    115a:	20 40       	sbci	r18, 0x00	; 0
    115c:	e1 f7       	brne	.-8      	; 0x1156 <main+0x4c>
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <main+0x56>
    1160:	00 00       	nop
		_delay_ms(250);
		LED(0);
    1162:	5d 98       	cbi	0x0b, 5	; 11
    1164:	e8 cf       	rjmp	.-48     	; 0x1136 <main+0x2c>
	}
	
	/* physically GPIB is connected, now check if any GPIB address is responsive */
	while (!findGpibdevice())
    1166:	9f d8       	rcall	.-3778   	; 0x2a6 <findGpibdevice>
    1168:	81 11       	cpse	r24, r1
    116a:	2c c0       	rjmp	.+88     	; 0x11c4 <main+0xba>
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	91 ee       	ldi	r25, 0xE1	; 225
    1170:	e4 e0       	ldi	r30, 0x04	; 4
    1172:	81 50       	subi	r24, 0x01	; 1
    1174:	90 40       	sbci	r25, 0x00	; 0
    1176:	e0 40       	sbci	r30, 0x00	; 0
    1178:	e1 f7       	brne	.-8      	; 0x1172 <main+0x68>
    117a:	00 c0       	rjmp	.+0      	; 0x117c <main+0x72>
    117c:	00 00       	nop
    117e:	5d 9a       	sbi	0x0b, 5	; 11
	{
		_delay_ms(100);
		LED(1);
    1180:	ff ef       	ldi	r31, 0xFF	; 255
    1182:	21 ee       	ldi	r18, 0xE1	; 225
    1184:	84 e0       	ldi	r24, 0x04	; 4
    1186:	f1 50       	subi	r31, 0x01	; 1
    1188:	20 40       	sbci	r18, 0x00	; 0
    118a:	80 40       	sbci	r24, 0x00	; 0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <main+0x7c>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <main+0x86>
    1190:	00 00       	nop
		_delay_ms(100);
		LED(0);
    1192:	5d 98       	cbi	0x0b, 5	; 11
		if (!gpib_is_connected()) /* we want to reset here if the device is unplugged */
    1194:	05 d1       	rcall	.+522    	; 0x13a0 <gpib_is_connected>
    1196:	81 11       	cpse	r24, r1
    1198:	e6 cf       	rjmp	.-52     	; 0x1166 <main+0x5c>
    119a:	5d 98       	cbi	0x0b, 5	; 11
		{
			LED(0);
    119c:	9f ef       	ldi	r25, 0xFF	; 255
    119e:	e9 e6       	ldi	r30, 0x69	; 105
    11a0:	f8 e1       	ldi	r31, 0x18	; 24
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	e0 40       	sbci	r30, 0x00	; 0
    11a6:	f0 40       	sbci	r31, 0x00	; 0
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <main+0x98>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <main+0xa2>
    11ac:	00 00       	nop
    11ae:	9c e0       	ldi	r25, 0x0C	; 12
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    11b0:	88 e1       	ldi	r24, 0x18	; 24
    11b2:	0f b6       	in	r0, 0x3f	; 63
    11b4:	f8 94       	cli
    11b6:	a8 95       	wdr
    11b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    11c2:	ff cf       	rjmp	.-2      	; 0x11c2 <main+0xb8>
    11c4:	f9 99       	sbic	0x1f, 1	; 31
			wdt_enable(WDTO_250MS);	
			while (1);
		}
	}; /* Identify the GPIB Address of the connected GPIB device */
	
	eeprom_busy_wait();
    11c6:	fe cf       	rjmp	.-4      	; 0x11c4 <main+0xba>
    11c8:	88 e6       	ldi	r24, 0x68	; 104
	if (eeprom_read_byte(104) != 0x01)
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 35 11 	call	0x226a	; 0x226a <eeprom_read_byte>
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	81 f1       	breq	.+96     	; 0x1234 <main+0x12a>
    11d4:	f9 99       	sbic	0x1f, 1	; 31
	{
		/* found a responsive GPIB address, now setup USB descriptor with *IDN? or ID? command response */
		eeprom_busy_wait();
    11d6:	fe cf       	rjmp	.-4      	; 0x11d4 <main+0xca>
		prevaddr = eeprom_read_byte((uint8_t*)0); /* read previous gpib address */
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 35 11 	call	0x226a	; 0x226a <eeprom_read_byte>
    11e0:	c8 2f       	mov	r28, r24
		if (identifyGpibDevice())
    11e2:	6c d8       	rcall	.-3880   	; 0x2bc <identifyGpibDevice>
    11e4:	88 23       	and	r24, r24
    11e6:	99 f0       	breq	.+38     	; 0x120e <main+0x104>
		{ /* received a string over GPIB => Store it in EEPROM, if it changed */
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
    11e8:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <gpib_addr>
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	8c da       	rcall	.-2792   	; 0x70a <eeprom_update_if_changed>
    11f2:	0a e7       	ldi	r16, 0x7A	; 122
    11f4:	11 e0       	ldi	r17, 0x01	; 1
    11f6:	c0 e0       	ldi	r28, 0x00	; 0
    11f8:	d0 e0       	ldi	r29, 0x00	; 0
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
			{
				eeprom_update_if_changed(1+i, *pdat++);
    11fa:	f8 01       	movw	r30, r16
    11fc:	61 91       	ld	r22, Z+
    11fe:	8f 01       	movw	r16, r30
    1200:	21 96       	adiw	r28, 0x01	; 1
    1202:	ce 01       	movw	r24, r28
    1204:	82 da       	rcall	.-2812   	; 0x70a <eeprom_update_if_changed>
    1206:	c6 36       	cpi	r28, 0x66	; 102
			uint8_t *pdat, i;
			
			/* update gpib address and usb string descriptor in eeprom */
			eeprom_update_if_changed(0, gpib_addr);
			pdat = (void *)&tmc_serial_string;
			for (i=0; i<sizeof(tmc_serial_string); i++)
    1208:	d1 05       	cpc	r29, r1
    120a:	b9 f7       	brne	.-18     	; 0x11fa <main+0xf0>
    120c:	23 c0       	rjmp	.+70     	; 0x1254 <main+0x14a>
    120e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <gpib_addr>
				eeprom_update_if_changed(1+i, *pdat++);
			}
		}
		else
		{ /* received NO string over GPIB => Check, if the GPIB addr matches the one in eeprom, then report EEProm string! */
			if (prevaddr == gpib_addr)
    1212:	c8 13       	cpse	r28, r24
    1214:	1f c0       	rjmp	.+62     	; 0x1254 <main+0x14a>
    1216:	0a e7       	ldi	r16, 0x7A	; 122
    1218:	11 e0       	ldi	r17, 0x01	; 1
    121a:	c1 e0       	ldi	r28, 0x01	; 1
    121c:	d0 e0       	ldi	r29, 0x00	; 0
    121e:	ce 01       	movw	r24, r28

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
				{
					*pdat++ = eeprom_read_byte((uint8_t*)(1+i));
    1220:	0e 94 35 11 	call	0x226a	; 0x226a <eeprom_read_byte>
    1224:	f8 01       	movw	r30, r16
    1226:	81 93       	st	Z+, r24
    1228:	8f 01       	movw	r16, r30
    122a:	21 96       	adiw	r28, 0x01	; 1
			{
				uint8_t *pdat, i;

				/* update gpib address and usb string descriptor in eeprom */
				pdat = (void *)&tmc_serial_string;
				for (i=0; i<sizeof(tmc_serial_string); i++)
    122c:	c7 36       	cpi	r28, 0x67	; 103
    122e:	d1 05       	cpc	r29, r1
    1230:	b1 f7       	brne	.-20     	; 0x121e <main+0x114>
    1232:	10 c0       	rjmp	.+32     	; 0x1254 <main+0x14a>
			}
		}
	}
	else /* user disabled fully automated detection mode */
	{
		TMC_SetInternalSerial(true);
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	0e 94 a7 00 	call	0x14e	; 0x14e <TMC_SetInternalSerial>
		gpib_ren(false);
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	b8 d0       	rcall	.+368    	; 0x13ae <gpib_ren>
    123e:	ff ef       	ldi	r31, 0xFF	; 255
    1240:	21 ee       	ldi	r18, 0xE1	; 225
    1242:	84 e0       	ldi	r24, 0x04	; 4
    1244:	f1 50       	subi	r31, 0x01	; 1
    1246:	20 40       	sbci	r18, 0x00	; 0
    1248:	80 40       	sbci	r24, 0x00	; 0
    124a:	e1 f7       	brne	.-8      	; 0x1244 <main+0x13a>
    124c:	00 c0       	rjmp	.+0      	; 0x124e <main+0x144>
		_delay_ms(100);
		gpib_ren(true);
    124e:	00 00       	nop
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	ad d0       	rcall	.+346    	; 0x13ae <gpib_ren>
	}

	/* all fine, now kickoff connect to USB to be able to communicate! */
	LED(1);
    1254:	5d 9a       	sbi	0x0b, 5	; 11
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1256:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    125a:	8e 7f       	andi	r24, 0xFE	; 254
    125c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
	USB_Attach();
	
	for (;;)
	{
		TMC_Task();
    1260:	8f dd       	rcall	.-1250   	; 0xd80 <TMC_Task>
    1262:	9e d0       	rcall	.+316    	; 0x13a0 <gpib_is_connected>

		if (!gpib_is_connected()) /* check, if gpib is disconnected */
    1264:	81 11       	cpse	r24, r1
    1266:	1a c0       	rjmp	.+52     	; 0x129c <main+0x192>
    1268:	5d 98       	cbi	0x0b, 5	; 11
    126a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    126e:	81 60       	ori	r24, 0x01	; 1
    1270:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7f80e0>
    1274:	9f ef       	ldi	r25, 0xFF	; 255
    1276:	e9 e6       	ldi	r30, 0x69	; 105
    1278:	f8 e1       	ldi	r31, 0x18	; 24
    127a:	91 50       	subi	r25, 0x01	; 1
    127c:	e0 40       	sbci	r30, 0x00	; 0
    127e:	f0 40       	sbci	r31, 0x00	; 0
    1280:	e1 f7       	brne	.-8      	; 0x127a <main+0x170>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <main+0x17a>
    1284:	00 00       	nop
    1286:	9c e0       	ldi	r25, 0x0C	; 12
    1288:	88 e1       	ldi	r24, 0x18	; 24
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	a8 95       	wdr
    1290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    129a:	ff cf       	rjmp	.-2      	; 0x129a <main+0x190>
    129c:	b7 d7       	rcall	.+3950   	; 0x220c <USB_USBTask>
			_delay_ms(500);
			wdt_enable(WDTO_250MS);	
			while (1);
		}
		
		USB_USBTask();
    129e:	e0 cf       	rjmp	.-64     	; 0x1260 <main+0x156>

000012a0 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
	
	*DescriptorMemorySpace = MEMSPACE_FLASH;
    12a0:	f9 01       	movw	r30, r18
    12a2:	10 82       	st	Z, r1

	switch (DescriptorType)
    12a4:	69 2f       	mov	r22, r25
    12a6:	77 27       	eor	r23, r23
    12a8:	62 30       	cpi	r22, 0x02	; 2
    12aa:	71 05       	cpc	r23, r1
    12ac:	59 f0       	breq	.+22     	; 0x12c4 <CALLBACK_USB_GetDescriptor+0x24>
    12ae:	63 30       	cpi	r22, 0x03	; 3
    12b0:	71 05       	cpc	r23, r1
    12b2:	69 f0       	breq	.+26     	; 0x12ce <CALLBACK_USB_GetDescriptor+0x2e>
    12b4:	61 30       	cpi	r22, 0x01	; 1
    12b6:	71 05       	cpc	r23, r1
    12b8:	49 f5       	brne	.+82     	; 0x130c <CALLBACK_USB_GetDescriptor+0x6c>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    12ba:	82 e1       	ldi	r24, 0x12	; 18
    12bc:	90 e0       	ldi	r25, 0x00	; 0
	*DescriptorMemorySpace = MEMSPACE_FLASH;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    12be:	21 e0       	ldi	r18, 0x01	; 1
    12c0:	31 e0       	ldi	r19, 0x01	; 1
    12c2:	28 c0       	rjmp	.+80     	; 0x1314 <CALLBACK_USB_GetDescriptor+0x74>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    12c4:	87 e2       	ldi	r24, 0x27	; 39
    12c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    12c8:	2a ed       	ldi	r18, 0xDA	; 218
    12ca:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    12cc:	23 c0       	rjmp	.+70     	; 0x1314 <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
    12ce:	99 27       	eor	r25, r25
    12d0:	81 30       	cpi	r24, 0x01	; 1
    12d2:	91 05       	cpc	r25, r1
    12d4:	91 f0       	breq	.+36     	; 0x12fa <CALLBACK_USB_GetDescriptor+0x5a>
    12d6:	70 f0       	brcs	.+28     	; 0x12f4 <CALLBACK_USB_GetDescriptor+0x54>
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	91 05       	cpc	r25, r1
    12dc:	89 f0       	breq	.+34     	; 0x1300 <CALLBACK_USB_GetDescriptor+0x60>
    12de:	03 97       	sbiw	r24, 0x03	; 3
    12e0:	a9 f4       	brne	.+42     	; 0x130c <CALLBACK_USB_GetDescriptor+0x6c>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
					Size = tmc_serial_string.Header.Size;
    12e2:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <tmc_serial_string>
    12e6:	90 e0       	ldi	r25, 0x00	; 0
					*DescriptorMemorySpace = MEMSPACE_RAM;
    12e8:	62 e0       	ldi	r22, 0x02	; 2
    12ea:	f9 01       	movw	r30, r18
    12ec:	60 83       	st	Z, r22
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case STRING_ID_Serial:
					Address = &tmc_serial_string;
    12ee:	2a e7       	ldi	r18, 0x7A	; 122
    12f0:	31 e0       	ldi	r19, 0x01	; 1
					Size = tmc_serial_string.Header.Size;
					*DescriptorMemorySpace = MEMSPACE_RAM;
					break;
    12f2:	10 c0       	rjmp	.+32     	; 0x1314 <CALLBACK_USB_GetDescriptor+0x74>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    12f4:	e6 ed       	ldi	r30, 0xD6	; 214
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    12fa:	ee eb       	ldi	r30, 0xBE	; 190
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <CALLBACK_USB_GetDescriptor+0x64>
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1300:	ec ea       	ldi	r30, 0xAC	; 172
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	84 91       	lpm	r24, Z
    1306:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1308:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    130a:	04 c0       	rjmp	.+8      	; 0x1314 <CALLBACK_USB_GetDescriptor+0x74>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
			                        uint8_t* const DescriptorMemorySpace)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
					break;
			}
			break;
	}

	*DescriptorAddress = Address;
    1314:	fa 01       	movw	r30, r20
    1316:	31 83       	std	Z+1, r19	; 0x01
    1318:	20 83       	st	Z, r18
	return Size;
}
    131a:	08 95       	ret

0000131c <is_timedout>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    131c:	85 e3       	ldi	r24, 0x35	; 53
    131e:	8a 95       	dec	r24
    1320:	f1 f7       	brne	.-4      	; 0x131e <is_timedout+0x2>
    1322:	00 00       	nop
}

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
    1324:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <timeout_val>
    1328:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <timeout_val+0x1>
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	39 f0       	breq	.+14     	; 0x133e <is_timedout+0x22>
		return true;
		
	timeout_val--;
    1330:	01 97       	sbiw	r24, 0x01	; 1
    1332:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    1336:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>
	return false;
    133a:	80 e0       	ldi	r24, 0x00	; 0
    133c:	08 95       	ret

static bool is_timedout(void)
{
	_delay_us(10);
	if (timeout_val == 0)
		return true;
    133e:	81 e0       	ldi	r24, 0x01	; 1
		
	timeout_val--;
	return false;
}
    1340:	08 95       	ret

00001342 <__vector_23>:
	timer0_100mscounter = 0;
}


ISR (TIMER0_OVF_vect)
{
    1342:	1f 92       	push	r1
    1344:	0f 92       	push	r0
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	0f 92       	push	r0
    134a:	11 24       	eor	r1, r1
    134c:	8f 93       	push	r24
	timer0_div++;
    134e:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <timer0_div>
    1352:	8f 5f       	subi	r24, 0xFF	; 255
    1354:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <timer0_div>
	if (timer0_div >= 6) /* are 100ms passed? */
    1358:	86 30       	cpi	r24, 0x06	; 6
    135a:	e0 f0       	brcs	.+56     	; 0x1394 <__vector_23+0x52>
	{
		timer0_100mscounter++;
    135c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <timer0_100mscounter>
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <timer0_100mscounter>
		timer0_div = 0;
    1366:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <timer0_div>
		
		if (!s_gpib_transaction_active) /* only check, if no GPIB transaction is active */
    136a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <s_gpib_transaction_active>
    136e:	81 11       	cpse	r24, r1
    1370:	11 c0       	rjmp	.+34     	; 0x1394 <__vector_23+0x52>
		{
			if (!ATN_STATE) /* is ATN LOW? This can only happen if no GPIB device is connected/powered */
    1372:	49 99       	sbic	0x09, 1	; 9
    1374:	0a c0       	rjmp	.+20     	; 0x138a <__vector_23+0x48>
			{
				if (s_gpib_disconnect_counter == 2)
    1376:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <s_gpib_disconnect_counter>
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	11 f4       	brne	.+4      	; 0x1382 <__vector_23+0x40>
				{ /* after 100-200ms with ATN low, assume, that there is no GPIB device connected */
					s_device_state = GPIB_DEVICE_CONNECTSTATE_DISCONNECTED;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <__vector_23+0x4e>
				}
				else
				{
					s_gpib_disconnect_counter++;
    1382:	8f 5f       	subi	r24, 0xFF	; 255
    1384:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <s_gpib_disconnect_counter>
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__vector_23+0x52>
				}
			}
			else
			{ /* device is connected */
				s_gpib_disconnect_counter = 0;
    138a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <s_gpib_disconnect_counter>
				s_device_state = GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    138e:	82 e0       	ldi	r24, 0x02	; 2
    1390:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <s_device_state>
			}
		}
	}
}
    1394:	8f 91       	pop	r24
    1396:	0f 90       	pop	r0
    1398:	0f be       	out	0x3f, r0	; 63
    139a:	0f 90       	pop	r0
    139c:	1f 90       	pop	r1
    139e:	18 95       	reti

000013a0 <gpib_is_connected>:
	timer_init(); /* init timeout timer */
}

bool gpib_is_connected(void)
{
	return s_device_state == GPIB_DEVICE_CONNECTSTATE_CONNECTED;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <s_device_state>
    13a6:	92 30       	cpi	r25, 0x02	; 2
    13a8:	09 f0       	breq	.+2      	; 0x13ac <gpib_is_connected+0xc>
    13aa:	80 e0       	ldi	r24, 0x00	; 0
}
    13ac:	08 95       	ret

000013ae <gpib_ren>:

void gpib_ren(bool enable)
{
	if (enable)
    13ae:	88 23       	and	r24, r24
    13b0:	11 f0       	breq	.+4      	; 0x13b6 <gpib_ren+0x8>
	{
		REN_LOW; /* remote enable */
    13b2:	3e 9a       	sbi	0x07, 6	; 7
    13b4:	08 95       	ret
	}
	else
	{
		REN_HIGH; /* remote disable */
    13b6:	3e 98       	cbi	0x07, 6	; 7
    13b8:	08 95       	ret

000013ba <gpib_interface_clear>:



void gpib_interface_clear(void)
{
	IFC_LOW; /* interface clear */
    13ba:	54 9a       	sbi	0x0a, 4	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13bc:	2f ef       	ldi	r18, 0xFF	; 255
    13be:	81 ee       	ldi	r24, 0xE1	; 225
    13c0:	94 e0       	ldi	r25, 0x04	; 4
    13c2:	21 50       	subi	r18, 0x01	; 1
    13c4:	80 40       	sbci	r24, 0x00	; 0
    13c6:	90 40       	sbci	r25, 0x00	; 0
    13c8:	e1 f7       	brne	.-8      	; 0x13c2 <gpib_interface_clear+0x8>
    13ca:	00 c0       	rjmp	.+0      	; 0x13cc <gpib_interface_clear+0x12>
    13cc:	00 00       	nop
	_delay_ms(100);
	IFC_HIGH; /* interface clear */
    13ce:	54 98       	cbi	0x0a, 4	; 10
    13d0:	8f e3       	ldi	r24, 0x3F	; 63
    13d2:	9c e9       	ldi	r25, 0x9C	; 156
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	f1 f7       	brne	.-4      	; 0x13d4 <gpib_interface_clear+0x1a>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <gpib_interface_clear+0x20>
    13da:	00 00       	nop
	_delay_ms(10);
	s_gpib_transaction_active = false;
    13dc:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <s_gpib_transaction_active>
    13e0:	08 95       	ret

000013e2 <gpib_init>:
 * global API functions
 **********************************************************************************************************/

void gpib_init(void)
{
	DDRD  &= 0b01111110;
    13e2:	8a b1       	in	r24, 0x0a	; 10
    13e4:	8e 77       	andi	r24, 0x7E	; 126
    13e6:	8a b9       	out	0x0a, r24	; 10
	PORTD &= 0b01111110;
    13e8:	8b b1       	in	r24, 0x0b	; 11
    13ea:	8e 77       	andi	r24, 0x7E	; 126
    13ec:	8b b9       	out	0x0b, r24	; 11
	DDRB  &= 0b10000001;
    13ee:	84 b1       	in	r24, 0x04	; 4
    13f0:	81 78       	andi	r24, 0x81	; 129
    13f2:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0b10000001;
    13f4:	85 b1       	in	r24, 0x05	; 5
    13f6:	81 78       	andi	r24, 0x81	; 129
    13f8:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~_BV(6);
    13fa:	46 98       	cbi	0x08, 6	; 8
	DDRC  &= ~_BV(6);
    13fc:	3e 98       	cbi	0x07, 6	; 7
	PORTD &= ~(_BV(1) | _BV(4));
    13fe:	8b b1       	in	r24, 0x0b	; 11
    1400:	8d 7e       	andi	r24, 0xED	; 237
    1402:	8b b9       	out	0x0b, r24	; 11
	DDRD  &= ~(_BV(1) | _BV(4));
    1404:	8a b1       	in	r24, 0x0a	; 10
    1406:	8d 7e       	andi	r24, 0xED	; 237
    1408:	8a b9       	out	0x0a, r24	; 10
	PORTF &= ~(_BV(4) | _BV(5) | _BV(6) | _BV(7));
    140a:	81 b3       	in	r24, 0x11	; 17
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	81 bb       	out	0x11, r24	; 17
	DDRF  &= ~(_BV(4) | _BV(5) | _BV(6) | _BV(7));
    1410:	80 b3       	in	r24, 0x10	; 16
    1412:	8f 70       	andi	r24, 0x0F	; 15
    1414:	80 bb       	out	0x10, r24	; 16

	REN_LOW; /* remote enable */
    1416:	3e 9a       	sbi	0x07, 6	; 7

	s_gpib_transaction_active = false;
    1418:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <s_gpib_transaction_active>
	s_gpib_disconnect_counter = 0;
    141c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <s_gpib_disconnect_counter>
	
	gpib_interface_clear();
    1420:	cc df       	rcall	.-104    	; 0x13ba <gpib_interface_clear>
}
*/

static void timer_init(void)
{
	TCCR0B = 5; // Prescaler 1024 = 15625 Hz
    1422:	85 e0       	ldi	r24, 0x05	; 5
    1424:	85 bd       	out	0x25, r24	; 37
	// Overflow Interrupt erlauben
	TIMSK0 |= (1<<TOIE0);
    1426:	ee e6       	ldi	r30, 0x6E	; 110
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	81 60       	ori	r24, 0x01	; 1
    142e:	80 83       	st	Z, r24
	timer0_div = 0;
    1430:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <timer0_div>
	timer0_100mscounter = 0;
    1434:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <timer0_100mscounter>
    1438:	08 95       	ret

0000143a <gpib_tx>:
{
	gpib_init();
}

static bool gpib_tx(uint8_t dat, bool iscommand, gpibtimeout_t ptimeoutfunc)
{
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	cf 93       	push	r28
    1440:	8a 01       	movw	r16, r20
	bool timedout;
	
	DAV_HIGH;
    1442:	86 98       	cbi	0x10, 6	; 16
	NRFD_HIGH;
    1444:	85 98       	cbi	0x10, 5	; 16
	NDAC_HIGH;  /* they should be already high, but let's enforce it */
    1446:	84 98       	cbi	0x10, 4	; 16
	
	if (iscommand) {
    1448:	66 23       	and	r22, r22
    144a:	11 f0       	breq	.+4      	; 0x1450 <gpib_tx+0x16>
		ATN_LOW;
    144c:	51 9a       	sbi	0x0a, 1	; 10
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <gpib_tx+0x18>
	} else {
		ATN_HIGH;
    1450:	51 98       	cbi	0x0a, 1	; 10
	}

	/* set Data to data bus */
	DDRD = (DDRD & 0b01111110) | (dat & 0b10000001);
    1452:	9a b1       	in	r25, 0x0a	; 10
    1454:	9e 77       	andi	r25, 0x7E	; 126
    1456:	28 2f       	mov	r18, r24
    1458:	21 78       	andi	r18, 0x81	; 129
    145a:	92 2b       	or	r25, r18
    145c:	9a b9       	out	0x0a, r25	; 10
	DDRB = (DDRB & 0b10000001) | (dat & 0b01111110);
    145e:	94 b1       	in	r25, 0x04	; 4
    1460:	91 78       	andi	r25, 0x81	; 129
    1462:	8e 77       	andi	r24, 0x7E	; 126
    1464:	89 2b       	or	r24, r25
    1466:	84 b9       	out	0x04, r24	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1468:	85 e0       	ldi	r24, 0x05	; 5
    146a:	8a 95       	dec	r24
    146c:	f1 f7       	brne	.-4      	; 0x146a <gpib_tx+0x30>
    146e:	00 00       	nop
	_delay_us(1); /* wait for data to settle */
		
	/* wait until ready for data acceptance (NRFD=H, NDAC=L)*/
	do
	{
		timedout = ptimeoutfunc();
    1470:	f8 01       	movw	r30, r16
    1472:	09 95       	icall
    1474:	c8 2f       	mov	r28, r24
	}
	while ( (NRFD_STATE == 0) && !timedout); /* wait until ready for data (NRFD to get high) */
    1476:	7d 99       	sbic	0x0f, 5	; 15
    1478:	03 c0       	rjmp	.+6      	; 0x1480 <gpib_tx+0x46>
    147a:	88 23       	and	r24, r24
    147c:	c9 f3       	breq	.-14     	; 0x1470 <gpib_tx+0x36>
    147e:	0b c0       	rjmp	.+22     	; 0x1496 <gpib_tx+0x5c>

	if (!timedout)
    1480:	81 11       	cpse	r24, r1
    1482:	09 c0       	rjmp	.+18     	; 0x1496 <gpib_tx+0x5c>
	{
		DAV_LOW;
    1484:	86 9a       	sbi	0x10, 6	; 16
		do
		{
			timedout = ptimeoutfunc();
    1486:	f8 01       	movw	r30, r16
    1488:	09 95       	icall
    148a:	c8 2f       	mov	r28, r24
		}
		while ( (NDAC_STATE == 0) && !timedout ); /* wait until NDAC gets high*/
    148c:	7c 99       	sbic	0x0f, 4	; 15
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <gpib_tx+0x5a>
    1490:	88 23       	and	r24, r24
    1492:	c9 f3       	breq	.-14     	; 0x1486 <gpib_tx+0x4c>
		DAV_HIGH; 
    1494:	86 98       	cbi	0x10, 6	; 16
	}
	
	/* release data bus */
	DDRD &= 0b01111110;
    1496:	8a b1       	in	r24, 0x0a	; 10
    1498:	8e 77       	andi	r24, 0x7E	; 126
    149a:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0b10000001;
    149c:	84 b1       	in	r24, 0x04	; 4
    149e:	81 78       	andi	r24, 0x81	; 129
    14a0:	84 b9       	out	0x04, r24	; 4
	ATN_HIGH;	 
    14a2:	51 98       	cbi	0x0a, 1	; 10
	
	if (timedout)
    14a4:	c1 11       	cpse	r28, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    14a6:	9d df       	rcall	.-198    	; 0x13e2 <gpib_init>
	if (timedout)
	{
		gpib_recover();
	}
	return timedout;
}
    14a8:	8c 2f       	mov	r24, r28
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	08 95       	ret

000014b2 <gpib_cmd_TAG>:
	return gpib_tx(addr | 0x60, true, ptimeoutfunc);
}


static bool gpib_cmd_TAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    14b2:	0f 93       	push	r16
    14b4:	1f 93       	push	r17
    14b6:	cf 93       	push	r28
    14b8:	c8 2f       	mov	r28, r24
    14ba:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
    14bc:	8f 71       	andi	r24, 0x1F	; 31
    14be:	ab 01       	movw	r20, r22
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	80 64       	ori	r24, 0x40	; 64
    14c4:	ba df       	rcall	.-140    	; 0x143a <gpib_tx>
	if (addr & 0xe0)
    14c6:	c0 7e       	andi	r28, 0xE0	; 224
    14c8:	39 f0       	breq	.+14     	; 0x14d8 <gpib_cmd_TAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    14ca:	a8 01       	movw	r20, r16
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    14d0:	cf 91       	pop	r28
    14d2:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x40, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)	
    14d4:	0f 91       	pop	r16
    14d6:	b1 cf       	rjmp	.-158    	; 0x143a <gpib_tx>
	}
	return result;
}
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <gpib_cmd_LAG>:
	return gpib_tx(dat, false, ptimeoutfunc);
}


static bool gpib_cmd_LAG(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	c8 2f       	mov	r28, r24
    14e8:	8b 01       	movw	r16, r22
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
    14ea:	8f 71       	andi	r24, 0x1F	; 31
    14ec:	ab 01       	movw	r20, r22
    14ee:	61 e0       	ldi	r22, 0x01	; 1
    14f0:	80 62       	ori	r24, 0x20	; 32
    14f2:	a3 df       	rcall	.-186    	; 0x143a <gpib_tx>
	if (addr & 0xe0)
    14f4:	c0 7e       	andi	r28, 0xE0	; 224
    14f6:	39 f0       	breq	.+14     	; 0x1506 <gpib_cmd_LAG+0x26>
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    14f8:	a8 01       	movw	r20, r16
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	80 e6       	ldi	r24, 0x60	; 96
	}
	return result;
}
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
{
	bool result;
	result = gpib_tx((addr & 0x1f) | 0x20, true, ptimeoutfunc);
	if (addr & 0xe0)
	{ /* send a secondary address? */
		result = gpib_tx(0x60, true, ptimeoutfunc);        // SAG (SA0)
    1502:	0f 91       	pop	r16
    1504:	9a cf       	rjmp	.-204    	; 0x143a <gpib_tx>
	}
	return result;
}
    1506:	cf 91       	pop	r28
    1508:	1f 91       	pop	r17
    150a:	0f 91       	pop	r16
    150c:	08 95       	ret

0000150e <gpib_cmd_UNL>:
	return result;
}

static bool gpib_cmd_UNL(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x3F, true, ptimeoutfunc);
    150e:	ac 01       	movw	r20, r24
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	8f e3       	ldi	r24, 0x3F	; 63
    1514:	92 cf       	rjmp	.-220    	; 0x143a <gpib_tx>

00001516 <gpib_trigger>:

}


bool gpib_trigger(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    151c:	e1 df       	rcall	.-62     	; 0x14e0 <gpib_cmd_LAG>
	if (!timedout)
    151e:	81 11       	cpse	r24, r1
    1520:	0a c0       	rjmp	.+20     	; 0x1536 <gpib_trigger+0x20>
	return gpib_tx(0x19, true, ptimeoutfunc);
}

static bool gpib_cmd_GET(gpibtimeout_t ptimeoutfunc) // group execute trigger (addressed command)
{
	return gpib_tx(0x08, true, ptimeoutfunc);
    1522:	ae 01       	movw	r20, r28
    1524:	61 e0       	ldi	r22, 0x01	; 1
    1526:	88 e0       	ldi	r24, 0x08	; 8
    1528:	88 df       	rcall	.-240    	; 0x143a <gpib_tx>
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GET(ptimeoutfunc);
	if (!timedout)
    152a:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    152c:	04 c0       	rjmp	.+8      	; 0x1536 <gpib_trigger+0x20>
    152e:	ce 01       	movw	r24, r28
		
	if (timedout)
    1530:	ee df       	rcall	.-36     	; 0x150e <gpib_cmd_UNL>
    1532:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1534:	11 f0       	breq	.+4      	; 0x153a <gpib_trigger+0x24>
    1536:	55 df       	rcall	.-342    	; 0x13e2 <gpib_init>
    1538:	81 e0       	ldi	r24, 0x01	; 1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();
	return timedout;
}
    153a:	df 91       	pop	r29
    153c:	cf 91       	pop	r28
    153e:	08 95       	ret

00001540 <gpib_gotoLocal>:
		gpib_recover();
	return timedout;
}

bool gpib_gotoLocal(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	eb 01       	movw	r28, r22
	bool timedout;
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
    1546:	cc df       	rcall	.-104    	; 0x14e0 <gpib_cmd_LAG>
	if (!timedout)
    1548:	81 11       	cpse	r24, r1
    154a:	09 c0       	rjmp	.+18     	; 0x155e <gpib_gotoLocal+0x1e>
	return gpib_tx(0x11, true, ptimeoutfunc);
}

static bool gpib_cmd_GTL(gpibtimeout_t ptimeoutfunc) // goto local
{
	return gpib_tx(0x01, true, ptimeoutfunc);
    154c:	ae 01       	movw	r20, r28
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	73 df       	rcall	.-282    	; 0x143a <gpib_tx>
	
	timedout = gpib_cmd_LAG(addr, ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_GTL(ptimeoutfunc);
		
	if (!timedout)
    1554:	81 11       	cpse	r24, r1
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    1556:	03 c0       	rjmp	.+6      	; 0x155e <gpib_gotoLocal+0x1e>
    1558:	ce 01       	movw	r24, r28
		
	if (timedout)
    155a:	d9 df       	rcall	.-78     	; 0x150e <gpib_cmd_UNL>

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    155c:	81 11       	cpse	r24, r1
    155e:	41 df       	rcall	.-382    	; 0x13e2 <gpib_init>
		timedout = gpib_cmd_UNL(ptimeoutfunc);
		
	if (timedout)
		gpib_recover();

}
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	08 95       	ret

00001568 <gpib_localLockout>:
		gpib_recover();	
	return status;
}

bool gpib_localLockout(gpibtimeout_t ptimeoutfunc)
{
    1568:	cf 93       	push	r28
	return gpib_tx(0x5F, true, ptimeoutfunc);
}

static bool gpib_cmd_LLO(gpibtimeout_t ptimeoutfunc) // local lockout
{
	return gpib_tx(0x11, true, ptimeoutfunc);
    156a:	ac 01       	movw	r20, r24
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	81 e1       	ldi	r24, 0x11	; 17
    1570:	64 df       	rcall	.-312    	; 0x143a <gpib_tx>
    1572:	c8 2f       	mov	r28, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1574:	81 11       	cpse	r24, r1
    1576:	35 df       	rcall	.-406    	; 0x13e2 <gpib_init>

	timedout = gpib_cmd_LLO(ptimeoutfunc);
	if (timedout)
		gpib_recover();
	return timedout;
}
    1578:	8c 2f       	mov	r24, r28
    157a:	cf 91       	pop	r28
    157c:	08 95       	ret

0000157e <gpib_readdat>:




uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
    157e:	bf 92       	push	r11
    1580:	cf 92       	push	r12
    1582:	df 92       	push	r13
    1584:	ef 92       	push	r14
    1586:	ff 92       	push	r15
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	8c 01       	movw	r16, r24
    1592:	6b 01       	movw	r12, r22
    1594:	7a 01       	movw	r14, r20
	
	c = 0;
	eoi = false;	
	
	/* skipping NRFD LOW step, because we are able to handshake and response to data */
	NDAC_LOW;
    1596:	84 9a       	sbi	0x10, 4	; 16
	NRFD_HIGH;
    1598:	85 98       	cbi	0x10, 5	; 16
	
	do
	{
		timedout = ptimeoutfunc();
    159a:	f7 01       	movw	r30, r14
    159c:	09 95       	icall
    159e:	b8 2e       	mov	r11, r24
	}
	while ( (DAV_STATE != 0) && !timedout ); /* wait until DAV gets low */
    15a0:	7e 9b       	sbis	0x0f, 6	; 15
    15a2:	03 c0       	rjmp	.+6      	; 0x15aa <gpib_readdat+0x2c>
    15a4:	88 23       	and	r24, r24
    15a6:	c9 f3       	breq	.-14     	; 0x159a <gpib_readdat+0x1c>
    15a8:	17 c0       	rjmp	.+46     	; 0x15d8 <gpib_readdat+0x5a>
	
	if (!timedout)
    15aa:	81 11       	cpse	r24, r1
    15ac:	15 c0       	rjmp	.+42     	; 0x15d8 <gpib_readdat+0x5a>
	{
		NRFD_LOW;
    15ae:	85 9a       	sbi	0x10, 5	; 16
		c = (PIND & 0b10000001) | (PINB & 0b01111110);
    15b0:	c9 b1       	in	r28, 0x09	; 9
    15b2:	83 b1       	in	r24, 0x03	; 3
    15b4:	c1 78       	andi	r28, 0x81	; 129
    15b6:	8e 77       	andi	r24, 0x7E	; 126
    15b8:	c8 2b       	or	r28, r24
		c = ~c;
    15ba:	c0 95       	com	r28
		eoi = (EOI_STATE == 0) ;
    15bc:	df b1       	in	r29, 0x0f	; 15
    15be:	d0 95       	com	r29
    15c0:	dd 1f       	adc	r29, r29
    15c2:	dd 27       	eor	r29, r29
    15c4:	dd 1f       	adc	r29, r29
		NDAC_HIGH;
    15c6:	84 98       	cbi	0x10, 4	; 16
		
		do
		{
			timedout = ptimeoutfunc();
    15c8:	f7 01       	movw	r30, r14
    15ca:	09 95       	icall
    15cc:	b8 2e       	mov	r11, r24
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
    15ce:	7e 99       	sbic	0x0f, 6	; 15
    15d0:	05 c0       	rjmp	.+10     	; 0x15dc <gpib_readdat+0x5e>
    15d2:	88 23       	and	r24, r24
    15d4:	c9 f3       	breq	.-14     	; 0x15c8 <gpib_readdat+0x4a>
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <gpib_readdat+0x5e>
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
	eoi = false;	
    15d8:	d0 e0       	ldi	r29, 0x00	; 0
uint8_t gpib_readdat(bool *pEoi, bool *ptimedout, gpibtimeout_t ptimeoutfunc)
{
	uint8_t c;
	bool eoi, timedout;	
	
	c = 0;
    15da:	c0 e0       	ldi	r28, 0x00	; 0
		}
		while ( (DAV_STATE == 0) && !timedout ); /* wait until DAV gets high */
	}

	
	if (s_terminator == '\0')
    15dc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <s_terminator>
    15e0:	91 11       	cpse	r25, r1
    15e2:	03 c0       	rjmp	.+6      	; 0x15ea <gpib_readdat+0x6c>
		*pEoi = eoi;
    15e4:	f8 01       	movw	r30, r16
    15e6:	d0 83       	st	Z, r29
    15e8:	08 c0       	rjmp	.+16     	; 0x15fa <gpib_readdat+0x7c>
	else
		*pEoi = eoi || (c == s_terminator);
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	d1 11       	cpse	r29, r1
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <gpib_readdat+0x76>
    15f0:	c9 13       	cpse	r28, r25
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 83       	st	Z, r24

	if (timedout)
    15fa:	b1 10       	cpse	r11, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    15fc:	f2 de       	rcall	.-540    	; 0x13e2 <gpib_init>

	if (timedout)
	{
		gpib_recover();
	}
	*ptimedout = timedout;
    15fe:	f6 01       	movw	r30, r12
    1600:	b0 82       	st	Z, r11
	return c;
};
    1602:	8c 2f       	mov	r24, r28
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	08 95       	ret

00001618 <gpib_readStatusByte>:
}



uint8_t gpib_readStatusByte(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	00 d0       	rcall	.+0      	; 0x1624 <gpib_readStatusByte+0xc>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	f8 2e       	mov	r15, r24
    162a:	8b 01       	movw	r16, r22
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
    162c:	1a 82       	std	Y+2, r1	; 0x02
}


static bool gpib_cmd_SPE(gpibtimeout_t ptimeoutfunc) // serial poll enable
{
	return gpib_tx(0x18, true, ptimeoutfunc);
    162e:	ab 01       	movw	r20, r22
    1630:	61 e0       	ldi	r22, 0x01	; 1
    1632:	88 e1       	ldi	r24, 0x18	; 24
    1634:	02 df       	rcall	.-508    	; 0x143a <gpib_tx>
	
	timedout = false;
	status = 0;
	
	if (!timedout)
		timedout = gpib_cmd_SPE(ptimeoutfunc);
    1636:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    1638:	81 11       	cpse	r24, r1
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <gpib_readStatusByte+0x2c>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); 
    163c:	b8 01       	movw	r22, r16
    163e:	8f 2d       	mov	r24, r15
    1640:	38 df       	rcall	.-400    	; 0x14b2 <gpib_cmd_TAG>
    1642:	8a 83       	std	Y+2, r24	; 0x02
	ATN_HIGH; /* make ATN H */	
    1644:	51 98       	cbi	0x0a, 1	; 10
	NDAC_LOW;   /* make NDAC L */
    1646:	84 9a       	sbi	0x10, 4	; 16

	if (!timedout)
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	81 11       	cpse	r24, r1
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <gpib_readStatusByte+0x48>
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
    164e:	a8 01       	movw	r20, r16
    1650:	be 01       	movw	r22, r28
    1652:	6e 5f       	subi	r22, 0xFE	; 254
    1654:	7f 4f       	sbci	r23, 0xFF	; 255
    1656:	ce 01       	movw	r24, r28
    1658:	01 96       	adiw	r24, 0x01	; 1
    165a:	91 df       	rcall	.-222    	; 0x157e <gpib_readdat>
    165c:	f8 2e       	mov	r15, r24
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <gpib_readStatusByte+0x4a>
{
	bool timedout, eoi;
	uint8_t status;
	
	timedout = false;
	status = 0;
    1660:	f1 2c       	mov	r15, r1
	NDAC_LOW;   /* make NDAC L */

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	81 11       	cpse	r24, r1
    1666:	05 c0       	rjmp	.+10     	; 0x1672 <gpib_readStatusByte+0x5a>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    1668:	a8 01       	movw	r20, r16
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	8f e5       	ldi	r24, 0x5F	; 95
    166e:	e5 de       	rcall	.-566    	; 0x143a <gpib_tx>

	if (!timedout)
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
    1670:	8a 83       	std	Y+2, r24	; 0x02
	if (!timedout)
    1672:	8a 81       	ldd	r24, Y+2	; 0x02
    1674:	81 11       	cpse	r24, r1
	return gpib_tx(0x18, true, ptimeoutfunc);
}

static bool gpib_cmd_SPD(gpibtimeout_t ptimeoutfunc) // serial poll disable
{
	return gpib_tx(0x19, true, ptimeoutfunc);
    1676:	05 c0       	rjmp	.+10     	; 0x1682 <gpib_readStatusByte+0x6a>
    1678:	a8 01       	movw	r20, r16
    167a:	61 e0       	ldi	r22, 0x01	; 1
    167c:	89 e1       	ldi	r24, 0x19	; 25
		status = gpib_readdat(&eoi, &timedout, ptimeoutfunc);
	
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc); 
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
    167e:	dd de       	rcall	.-582    	; 0x143a <gpib_tx>
	if (timedout)
    1680:	8a 83       	std	Y+2, r24	; 0x02
    1682:	8a 81       	ldd	r24, Y+2	; 0x02

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    1684:	81 11       	cpse	r24, r1
    1686:	ad de       	rcall	.-678    	; 0x13e2 <gpib_init>
	if (!timedout)
		timedout = gpib_cmd_SPD(ptimeoutfunc);
	if (timedout)
		gpib_recover();	
	return status;
}
    1688:	8f 2d       	mov	r24, r15
    168a:	0f 90       	pop	r0
    168c:	0f 90       	pop	r0
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	ff 90       	pop	r15
    1698:	08 95       	ret

0000169a <gpib_untalk_unlisten>:
	*ptimedout = timedout;
	return c;
};

bool gpib_untalk_unlisten(gpibtimeout_t ptimeoutfunc)
{
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    16a0:	36 df       	rcall	.-404    	; 0x150e <gpib_cmd_UNL>
	if (!timedout)
    16a2:	88 23       	and	r24, r24

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    16a4:	19 f0       	breq	.+6      	; 0x16ac <gpib_untalk_unlisten+0x12>
    16a6:	9d de       	rcall	.-710    	; 0x13e2 <gpib_init>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	06 c0       	rjmp	.+12     	; 0x16b8 <gpib_untalk_unlisten+0x1e>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    16ac:	ae 01       	movw	r20, r28
    16ae:	61 e0       	ldi	r22, 0x01	; 1
    16b0:	8f e5       	ldi	r24, 0x5F	; 95
    16b2:	c3 de       	rcall	.-634    	; 0x143a <gpib_tx>
{
	bool timedout;	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (timedout)
    16b4:	81 11       	cpse	r24, r1
    16b6:	f7 cf       	rjmp	.-18     	; 0x16a6 <gpib_untalk_unlisten+0xc>
		gpib_recover();
		
	s_gpib_transaction_active = false;
    16b8:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <s_gpib_transaction_active>
	return timedout;
}
    16bc:	df 91       	pop	r29
    16be:	cf 91       	pop	r28
    16c0:	08 95       	ret

000016c2 <gpib_make_talker>:

bool  gpib_make_talker(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	d8 2f       	mov	r29, r24
    16cc:	8b 01       	movw	r16, r22
	bool timedout;
	
	s_gpib_transaction_active = true;
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <s_gpib_transaction_active>
	
	timedout = gpib_cmd_UNL(ptimeoutfunc);
    16d4:	cb 01       	movw	r24, r22
    16d6:	1b df       	rcall	.-458    	; 0x150e <gpib_cmd_UNL>
    16d8:	c8 2f       	mov	r28, r24
	if (!timedout)
    16da:	81 11       	cpse	r24, r1
    16dc:	04 c0       	rjmp	.+8      	; 0x16e6 <gpib_make_talker+0x24>
		timedout = gpib_cmd_TAG(addr, ptimeoutfunc); /* address as talker*/
    16de:	b8 01       	movw	r22, r16
    16e0:	8d 2f       	mov	r24, r29
    16e2:	e7 de       	rcall	.-562    	; 0x14b2 <gpib_cmd_TAG>
    16e4:	c8 2f       	mov	r28, r24
	ATN_HIGH; /* make ATN H */	
    16e6:	51 98       	cbi	0x0a, 1	; 10
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
    16e8:	84 9a       	sbi	0x10, 4	; 16

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    16ea:	c1 11       	cpse	r28, r1
    16ec:	7a de       	rcall	.-780    	; 0x13e2 <gpib_init>
	NDAC_LOW;   /* make NDAC L */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    16ee:	8c 2f       	mov	r24, r28
    16f0:	df 91       	pop	r29
    16f2:	cf 91       	pop	r28
    16f4:	1f 91       	pop	r17
    16f6:	0f 91       	pop	r16
    16f8:	08 95       	ret

000016fa <gpib_make_listener>:

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	18 2f       	mov	r17, r24
    1702:	eb 01       	movw	r28, r22
	bool timedout;
	s_gpib_transaction_active = true;
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <s_gpib_transaction_active>
	return gpib_tx(0x3F, true, ptimeoutfunc);
}

static bool gpib_cmd_UNT(gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(0x5F, true, ptimeoutfunc);
    170a:	ab 01       	movw	r20, r22
    170c:	61 e0       	ldi	r22, 0x01	; 1
    170e:	8f e5       	ldi	r24, 0x5F	; 95
    1710:	94 de       	rcall	.-728    	; 0x143a <gpib_tx>
bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
    1712:	88 23       	and	r24, r24
    1714:	11 f0       	breq	.+4      	; 0x171a <gpib_make_listener+0x20>
		gpib_recover();
	return timedout;
}

bool gpib_make_listener(uint8_t addr, gpibtimeout_t ptimeoutfunc)
{
    1716:	c1 e0       	ldi	r28, 0x01	; 1
    1718:	08 c0       	rjmp	.+16     	; 0x172a <gpib_make_listener+0x30>
	bool timedout;
	s_gpib_transaction_active = true;
	timedout = gpib_cmd_UNT(ptimeoutfunc);
	if (!timedout)
		timedout = gpib_cmd_UNL(ptimeoutfunc);
    171a:	ce 01       	movw	r24, r28
    171c:	f8 de       	rcall	.-528    	; 0x150e <gpib_cmd_UNL>
	if (!timedout)
    171e:	81 11       	cpse	r24, r1
    1720:	fa cf       	rjmp	.-12     	; 0x1716 <gpib_make_listener+0x1c>
		timedout = gpib_cmd_LAG(addr, ptimeoutfunc); /* address target as listener*/
    1722:	be 01       	movw	r22, r28
    1724:	81 2f       	mov	r24, r17
    1726:	dc de       	rcall	.-584    	; 0x14e0 <gpib_cmd_LAG>
    1728:	c8 2f       	mov	r28, r24
		
	ATN_HIGH;    /* make ATN H */
    172a:	51 98       	cbi	0x0a, 1	; 10
	
	if (timedout)
    172c:	c1 11       	cpse	r28, r1

static char s_terminator = '\0'; /* \0 = no termination character - EOI only, other options are '\n' or '\r' */
 
static void gpib_recover(void)
{
	gpib_init();
    172e:	59 de       	rcall	.-846    	; 0x13e2 <gpib_init>
    1730:	8c 2f       	mov	r24, r28
	ATN_HIGH;    /* make ATN H */
	
	if (timedout)
		gpib_recover();
	return timedout;
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	1f 91       	pop	r17
    1738:	08 95       	ret

0000173a <gpib_writedat>:
    173a:	61 11       	cpse	r22, r1
bool gpib_writedat(uint8_t dat, bool Eoi, gpibtimeout_t ptimeoutfunc)
{
	bool timedout;
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
    173c:	87 9a       	sbi	0x10, 7	; 16
	return timedout;
}

static bool gpib_dat(uint8_t dat, gpibtimeout_t ptimeoutfunc)
{
	return gpib_tx(dat, false, ptimeoutfunc);
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	7c de       	rcall	.-776    	; 0x143a <gpib_tx>
	if (Eoi)
	{
		EOI_LOW; /* make EOI L */
	}
	timedout = gpib_dat(dat, ptimeoutfunc);
	EOI_HIGH;    /* make EOI H */
    1742:	87 98       	cbi	0x10, 7	; 16
	return timedout;
}
    1744:	08 95       	ret

00001746 <gpib_set_readtermination>:

void gpib_set_readtermination(char terminator)
{
	switch(terminator)
    1746:	8a 30       	cpi	r24, 0x0A	; 10
    1748:	11 f0       	breq	.+4      	; 0x174e <gpib_set_readtermination+0x8>
    174a:	8d 30       	cpi	r24, 0x0D	; 13
    174c:	19 f4       	brne	.+6      	; 0x1754 <gpib_set_readtermination+0xe>
	{
		case '\n':
			s_terminator = '\n';
			break;
		case '\r':
			s_terminator = '\r';
    174e:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <s_terminator>
			break;
    1752:	08 95       	ret
		default:
			s_terminator = '\0';
    1754:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <s_terminator>
    1758:	08 95       	ret

0000175a <gpib_search>:
	timeout_val--;
	return false;
}

uint8_t gpib_search(void)
{
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1764:	84 ef       	ldi	r24, 0xF4	; 244
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    176c:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>
uint8_t gpib_search(void)
{
	uint8_t addr, foundaddr;
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    1770:	4e e8       	ldi	r20, 0x8E	; 142
    1772:	59 e0       	ldi	r21, 0x09	; 9
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	8f e3       	ldi	r24, 0x3F	; 63
    1778:	60 de       	rcall	.-832    	; 0x143a <gpib_tx>
	
	foundaddr = 255;
	addr = 255;
    177a:	cf ef       	ldi	r28, 0xFF	; 255

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    177c:	84 ef       	ldi	r24, 0xF4	; 244
    177e:	e8 2e       	mov	r14, r24
    1780:	ff 24       	eor	r15, r15
    1782:	f3 94       	inc	r15
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
    1784:	cf 5f       	subi	r28, 0xFF	; 255
    1786:	1c 2f       	mov	r17, r28
    1788:	1f 71       	andi	r17, 0x1F	; 31
		if ((addr & 0x1f) != 31)
    178a:	1f 31       	cpi	r17, 0x1F	; 31
    178c:	09 f4       	brne	.+2      	; 0x1790 <gpib_search+0x36>
    178e:	3c c0       	rjmp	.+120    	; 0x1808 <gpib_search+0xae>

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    1790:	f0 92 6e 01 	sts	0x016E, r15	; 0x80016e <timeout_val+0x1>
    1794:	e0 92 6d 01 	sts	0x016D, r14	; 0x80016d <timeout_val>
	
		addr++;
		if ((addr & 0x1f) != 31)
		{
			timeout_start(500);
			gpib_cmd_LAG(addr, is_timedout);
    1798:	6e e8       	ldi	r22, 0x8E	; 142
    179a:	79 e0       	ldi	r23, 0x09	; 9
    179c:	8c 2f       	mov	r24, r28
    179e:	a0 de       	rcall	.-704    	; 0x14e0 <gpib_cmd_LAG>
			
			ATN_HIGH; /* make ATN H */
    17a0:	51 98       	cbi	0x0a, 1	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17a2:	8f e3       	ldi	r24, 0x3F	; 63
    17a4:	9f e1       	ldi	r25, 0x1F	; 31
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	f1 f7       	brne	.-4      	; 0x17a6 <gpib_search+0x4c>
    17aa:	00 c0       	rjmp	.+0      	; 0x17ac <gpib_search+0x52>
    17ac:	00 00       	nop
			_delay_ms(2);
			if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    17ae:	7c 99       	sbic	0x0f, 4	; 15
    17b0:	2b c0       	rjmp	.+86     	; 0x1808 <gpib_search+0xae>
    17b2:	49 9b       	sbis	0x09, 1	; 9
    17b4:	29 c0       	rjmp	.+82     	; 0x1808 <gpib_search+0xae>
	foundaddr = 255;
	addr = 255;
	do
	{
	
		addr++;
    17b6:	dc 2f       	mov	r29, r28

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    17b8:	84 ef       	ldi	r24, 0xF4	; 244
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    17c0:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>
		
	}
	while ( (addr < 63) && (foundaddr == 255));
	
	timeout_start(500);
	gpib_tx(0x3F, true, is_timedout); // UNL
    17c4:	4e e8       	ldi	r20, 0x8E	; 142
    17c6:	59 e0       	ldi	r21, 0x09	; 9
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	8f e3       	ldi	r24, 0x3F	; 63
    17cc:	36 de       	rcall	.-916    	; 0x143a <gpib_tx>
	
	/* if the device needs a secondary address, ensure, that it really cannot be addressed without secondary address */
	if (addr >= 32)
    17ce:	c0 32       	cpi	r28, 0x20	; 32
    17d0:	00 f1       	brcs	.+64     	; 0x1812 <gpib_search+0xb8>
	{
		/* address once without SA. If it responds, force it to this primary addressing only! */
		gpib_cmd_LAG(addr & 0x1f, is_timedout);
    17d2:	6e e8       	ldi	r22, 0x8E	; 142
    17d4:	79 e0       	ldi	r23, 0x09	; 9
    17d6:	81 2f       	mov	r24, r17
    17d8:	83 de       	rcall	.-762    	; 0x14e0 <gpib_cmd_LAG>
		ATN_HIGH; /* make ATN H */
    17da:	51 98       	cbi	0x0a, 1	; 10
    17dc:	8f e3       	ldi	r24, 0x3F	; 63
    17de:	9f e1       	ldi	r25, 0x1F	; 31
    17e0:	01 97       	sbiw	r24, 0x01	; 1
    17e2:	f1 f7       	brne	.-4      	; 0x17e0 <gpib_search+0x86>
    17e4:	00 c0       	rjmp	.+0      	; 0x17e6 <gpib_search+0x8c>
    17e6:	00 00       	nop
		_delay_ms(2);
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
    17e8:	7c 99       	sbic	0x0f, 4	; 15
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <gpib_search+0x96>
    17ec:	49 99       	sbic	0x09, 1	; 9
    17ee:	d1 2f       	mov	r29, r17

static uint16_t timeout_val;

static void timeout_start(uint16_t timeout)
{
	timeout_val = timeout;
    17f0:	84 ef       	ldi	r24, 0xF4	; 244
    17f2:	91 e0       	ldi	r25, 0x01	; 1
    17f4:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <timeout_val+0x1>
    17f8:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <timeout_val>
		if ( (NDAC_STATE == 0) && (ATN_STATE != 0))
		{
			foundaddr = addr & 0x1f;
		}
		timeout_start(500);
		gpib_tx(0x3F, true, is_timedout); // UNL
    17fc:	4e e8       	ldi	r20, 0x8E	; 142
    17fe:	59 e0       	ldi	r21, 0x09	; 9
    1800:	61 e0       	ldi	r22, 0x01	; 1
    1802:	8f e3       	ldi	r24, 0x3F	; 63
    1804:	1a de       	rcall	.-972    	; 0x143a <gpib_tx>
	}
	
	//return 1;
		
	return foundaddr;
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <gpib_search+0xb8>
				foundaddr = addr;
			}
		}
		
	}
	while ( (addr < 63) && (foundaddr == 255));
    1808:	cf 33       	cpi	r28, 0x3F	; 63
    180a:	09 f0       	breq	.+2      	; 0x180e <gpib_search+0xb4>
    180c:	bb cf       	rjmp	.-138    	; 0x1784 <gpib_search+0x2a>
    180e:	df ef       	ldi	r29, 0xFF	; 255
    1810:	d3 cf       	rjmp	.-90     	; 0x17b8 <gpib_search+0x5e>
	}
	
	//return 1;
		
	return foundaddr;
}
    1812:	8d 2f       	mov	r24, r29
    1814:	df 91       	pop	r29
    1816:	cf 91       	pop	r28
    1818:	1f 91       	pop	r17
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	08 95       	ret

00001820 <Endpoint_Write_Stream_LE>:
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1820:	cf 92       	push	r12
    1822:	df 92       	push	r13
    1824:	ef 92       	push	r14
    1826:	ff 92       	push	r15
    1828:	0f 93       	push	r16
    182a:	1f 93       	push	r17
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	ec 01       	movw	r28, r24
    1832:	8b 01       	movw	r16, r22
    1834:	7a 01       	movw	r14, r20
    1836:	12 d2       	rcall	.+1060   	; 0x1c5c <Endpoint_WaitUntilReady>
    1838:	81 11       	cpse	r24, r1
    183a:	32 c0       	rjmp	.+100    	; 0x18a0 <Endpoint_Write_Stream_LE+0x80>
    183c:	e1 14       	cp	r14, r1
    183e:	f1 04       	cpc	r15, r1
    1840:	39 f0       	breq	.+14     	; 0x1850 <Endpoint_Write_Stream_LE+0x30>
    1842:	f7 01       	movw	r30, r14
    1844:	80 81       	ld	r24, Z
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	08 1b       	sub	r16, r24
    184a:	19 0b       	sbc	r17, r25
    184c:	c8 0f       	add	r28, r24
    184e:	d9 1f       	adc	r29, r25
    1850:	c1 2c       	mov	r12, r1
    1852:	d1 2c       	mov	r13, r1
    1854:	01 15       	cp	r16, r1
    1856:	11 05       	cpc	r17, r1
    1858:	11 f1       	breq	.+68     	; 0x189e <Endpoint_Write_Stream_LE+0x7e>
    185a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    185e:	85 fd       	sbrc	r24, 5
    1860:	15 c0       	rjmp	.+42     	; 0x188c <Endpoint_Write_Stream_LE+0x6c>
    1862:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1866:	8e 77       	andi	r24, 0x7E	; 126
    1868:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    186c:	e1 14       	cp	r14, r1
    186e:	f1 04       	cpc	r15, r1
    1870:	49 f0       	breq	.+18     	; 0x1884 <Endpoint_Write_Stream_LE+0x64>
    1872:	f7 01       	movw	r30, r14
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	c8 0e       	add	r12, r24
    187a:	d9 1e       	adc	r13, r25
    187c:	d1 82       	std	Z+1, r13	; 0x01
    187e:	c0 82       	st	Z, r12
    1880:	85 e0       	ldi	r24, 0x05	; 5
    1882:	0e c0       	rjmp	.+28     	; 0x18a0 <Endpoint_Write_Stream_LE+0x80>
    1884:	eb d1       	rcall	.+982    	; 0x1c5c <Endpoint_WaitUntilReady>
    1886:	88 23       	and	r24, r24
    1888:	29 f3       	breq	.-54     	; 0x1854 <Endpoint_Write_Stream_LE+0x34>
    188a:	0a c0       	rjmp	.+20     	; 0x18a0 <Endpoint_Write_Stream_LE+0x80>
    188c:	89 91       	ld	r24, Y+
    188e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1892:	01 50       	subi	r16, 0x01	; 1
    1894:	11 09       	sbc	r17, r1
    1896:	ff ef       	ldi	r31, 0xFF	; 255
    1898:	cf 1a       	sub	r12, r31
    189a:	df 0a       	sbc	r13, r31
    189c:	db cf       	rjmp	.-74     	; 0x1854 <Endpoint_Write_Stream_LE+0x34>
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	ff 90       	pop	r15
    18aa:	ef 90       	pop	r14
    18ac:	df 90       	pop	r13
    18ae:	cf 90       	pop	r12
    18b0:	08 95       	ret

000018b2 <Endpoint_Read_Stream_LE>:
    18b2:	cf 92       	push	r12
    18b4:	df 92       	push	r13
    18b6:	ef 92       	push	r14
    18b8:	ff 92       	push	r15
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	cf 93       	push	r28
    18c0:	df 93       	push	r29
    18c2:	ec 01       	movw	r28, r24
    18c4:	8b 01       	movw	r16, r22
    18c6:	7a 01       	movw	r14, r20
    18c8:	c9 d1       	rcall	.+914    	; 0x1c5c <Endpoint_WaitUntilReady>
    18ca:	81 11       	cpse	r24, r1
    18cc:	32 c0       	rjmp	.+100    	; 0x1932 <Endpoint_Read_Stream_LE+0x80>
    18ce:	e1 14       	cp	r14, r1
    18d0:	f1 04       	cpc	r15, r1
    18d2:	39 f0       	breq	.+14     	; 0x18e2 <Endpoint_Read_Stream_LE+0x30>
    18d4:	f7 01       	movw	r30, r14
    18d6:	80 81       	ld	r24, Z
    18d8:	91 81       	ldd	r25, Z+1	; 0x01
    18da:	08 1b       	sub	r16, r24
    18dc:	19 0b       	sbc	r17, r25
    18de:	c8 0f       	add	r28, r24
    18e0:	d9 1f       	adc	r29, r25
    18e2:	c1 2c       	mov	r12, r1
    18e4:	d1 2c       	mov	r13, r1
    18e6:	01 15       	cp	r16, r1
    18e8:	11 05       	cpc	r17, r1
    18ea:	11 f1       	breq	.+68     	; 0x1930 <Endpoint_Read_Stream_LE+0x7e>
    18ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18f0:	85 fd       	sbrc	r24, 5
    18f2:	15 c0       	rjmp	.+42     	; 0x191e <Endpoint_Read_Stream_LE+0x6c>
    18f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18f8:	8b 77       	andi	r24, 0x7B	; 123
    18fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    18fe:	e1 14       	cp	r14, r1
    1900:	f1 04       	cpc	r15, r1
    1902:	49 f0       	breq	.+18     	; 0x1916 <Endpoint_Read_Stream_LE+0x64>
    1904:	f7 01       	movw	r30, r14
    1906:	80 81       	ld	r24, Z
    1908:	91 81       	ldd	r25, Z+1	; 0x01
    190a:	c8 0e       	add	r12, r24
    190c:	d9 1e       	adc	r13, r25
    190e:	d1 82       	std	Z+1, r13	; 0x01
    1910:	c0 82       	st	Z, r12
    1912:	85 e0       	ldi	r24, 0x05	; 5
    1914:	0e c0       	rjmp	.+28     	; 0x1932 <Endpoint_Read_Stream_LE+0x80>
    1916:	a2 d1       	rcall	.+836    	; 0x1c5c <Endpoint_WaitUntilReady>
    1918:	88 23       	and	r24, r24
    191a:	29 f3       	breq	.-54     	; 0x18e6 <Endpoint_Read_Stream_LE+0x34>
    191c:	0a c0       	rjmp	.+20     	; 0x1932 <Endpoint_Read_Stream_LE+0x80>
    191e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1922:	89 93       	st	Y+, r24
    1924:	01 50       	subi	r16, 0x01	; 1
    1926:	11 09       	sbc	r17, r1
    1928:	ff ef       	ldi	r31, 0xFF	; 255
    192a:	cf 1a       	sub	r12, r31
    192c:	df 0a       	sbc	r13, r31
    192e:	db cf       	rjmp	.-74     	; 0x18e6 <Endpoint_Read_Stream_LE+0x34>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	ff 90       	pop	r15
    193c:	ef 90       	pop	r14
    193e:	df 90       	pop	r13
    1940:	cf 90       	pop	r12
    1942:	08 95       	ret

00001944 <Endpoint_Write_Control_Stream_LE>:
    1944:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <USB_ControlRequest+0x6>
    1948:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <USB_ControlRequest+0x7>
    194c:	26 17       	cp	r18, r22
    194e:	37 07       	cpc	r19, r23
    1950:	48 f0       	brcs	.+18     	; 0x1964 <Endpoint_Write_Control_Stream_LE+0x20>
    1952:	61 15       	cp	r22, r1
    1954:	71 05       	cpc	r23, r1
    1956:	39 f4       	brne	.+14     	; 0x1966 <Endpoint_Write_Control_Stream_LE+0x22>
    1958:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    195c:	2e 77       	andi	r18, 0x7E	; 126
    195e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <Endpoint_Write_Control_Stream_LE+0x22>
    1964:	b9 01       	movw	r22, r18
    1966:	fc 01       	movw	r30, r24
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	61 15       	cp	r22, r1
    196c:	71 05       	cpc	r23, r1
    196e:	79 f1       	breq	.+94     	; 0x19ce <Endpoint_Write_Control_Stream_LE+0x8a>
    1970:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    1974:	88 23       	and	r24, r24
    1976:	f1 f1       	breq	.+124    	; 0x19f4 <Endpoint_Write_Control_Stream_LE+0xb0>
    1978:	85 30       	cpi	r24, 0x05	; 5
    197a:	f1 f1       	breq	.+124    	; 0x19f8 <Endpoint_Write_Control_Stream_LE+0xb4>
    197c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1980:	83 fd       	sbrc	r24, 3
    1982:	3c c0       	rjmp	.+120    	; 0x19fc <Endpoint_Write_Control_Stream_LE+0xb8>
    1984:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1988:	82 fd       	sbrc	r24, 2
    198a:	2e c0       	rjmp	.+92     	; 0x19e8 <Endpoint_Write_Control_Stream_LE+0xa4>
    198c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1990:	80 ff       	sbrs	r24, 0
    1992:	eb cf       	rjmp	.-42     	; 0x196a <Endpoint_Write_Control_Stream_LE+0x26>
    1994:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1998:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	92 2b       	or	r25, r18
    19a0:	61 15       	cp	r22, r1
    19a2:	71 05       	cpc	r23, r1
    19a4:	51 f0       	breq	.+20     	; 0x19ba <Endpoint_Write_Control_Stream_LE+0x76>
    19a6:	88 30       	cpi	r24, 0x08	; 8
    19a8:	91 05       	cpc	r25, r1
    19aa:	38 f4       	brcc	.+14     	; 0x19ba <Endpoint_Write_Control_Stream_LE+0x76>
    19ac:	21 91       	ld	r18, Z+
    19ae:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    19b2:	61 50       	subi	r22, 0x01	; 1
    19b4:	71 09       	sbc	r23, r1
    19b6:	01 96       	adiw	r24, 0x01	; 1
    19b8:	f3 cf       	rjmp	.-26     	; 0x19a0 <Endpoint_Write_Control_Stream_LE+0x5c>
    19ba:	21 e0       	ldi	r18, 0x01	; 1
    19bc:	08 97       	sbiw	r24, 0x08	; 8
    19be:	09 f0       	breq	.+2      	; 0x19c2 <Endpoint_Write_Control_Stream_LE+0x7e>
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19c6:	8e 77       	andi	r24, 0x7E	; 126
    19c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19cc:	ce cf       	rjmp	.-100    	; 0x196a <Endpoint_Write_Control_Stream_LE+0x26>
    19ce:	21 11       	cpse	r18, r1
    19d0:	cf cf       	rjmp	.-98     	; 0x1970 <Endpoint_Write_Control_Stream_LE+0x2c>
    19d2:	0a c0       	rjmp	.+20     	; 0x19e8 <Endpoint_Write_Control_Stream_LE+0xa4>
    19d4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    19d8:	88 23       	and	r24, r24
    19da:	61 f0       	breq	.+24     	; 0x19f4 <Endpoint_Write_Control_Stream_LE+0xb0>
    19dc:	85 30       	cpi	r24, 0x05	; 5
    19de:	61 f0       	breq	.+24     	; 0x19f8 <Endpoint_Write_Control_Stream_LE+0xb4>
    19e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19e4:	83 fd       	sbrc	r24, 3
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <Endpoint_Write_Control_Stream_LE+0xb8>
    19e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    19ec:	82 ff       	sbrs	r24, 2
    19ee:	f2 cf       	rjmp	.-28     	; 0x19d4 <Endpoint_Write_Control_Stream_LE+0x90>
    19f0:	80 e0       	ldi	r24, 0x00	; 0
    19f2:	08 95       	ret
    19f4:	82 e0       	ldi	r24, 0x02	; 2
    19f6:	08 95       	ret
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	08 95       	ret
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	08 95       	ret

00001a00 <Endpoint_Write_Control_PStream_LE>:
    1a00:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <USB_ControlRequest+0x6>
    1a04:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <USB_ControlRequest+0x7>
    1a08:	26 17       	cp	r18, r22
    1a0a:	37 07       	cpc	r19, r23
    1a0c:	48 f0       	brcs	.+18     	; 0x1a20 <Endpoint_Write_Control_PStream_LE+0x20>
    1a0e:	61 15       	cp	r22, r1
    1a10:	71 05       	cpc	r23, r1
    1a12:	39 f4       	brne	.+14     	; 0x1a22 <Endpoint_Write_Control_PStream_LE+0x22>
    1a14:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a18:	2e 77       	andi	r18, 0x7E	; 126
    1a1a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <Endpoint_Write_Control_PStream_LE+0x22>
    1a20:	b9 01       	movw	r22, r18
    1a22:	fc 01       	movw	r30, r24
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	61 15       	cp	r22, r1
    1a28:	71 05       	cpc	r23, r1
    1a2a:	91 f1       	breq	.+100    	; 0x1a90 <Endpoint_Write_Control_PStream_LE+0x90>
    1a2c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    1a30:	88 23       	and	r24, r24
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <Endpoint_Write_Control_PStream_LE+0x36>
    1a34:	40 c0       	rjmp	.+128    	; 0x1ab6 <Endpoint_Write_Control_PStream_LE+0xb6>
    1a36:	85 30       	cpi	r24, 0x05	; 5
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <Endpoint_Write_Control_PStream_LE+0x3c>
    1a3a:	3f c0       	rjmp	.+126    	; 0x1aba <Endpoint_Write_Control_PStream_LE+0xba>
    1a3c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a40:	83 fd       	sbrc	r24, 3
    1a42:	3d c0       	rjmp	.+122    	; 0x1abe <Endpoint_Write_Control_PStream_LE+0xbe>
    1a44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a48:	82 fd       	sbrc	r24, 2
    1a4a:	2f c0       	rjmp	.+94     	; 0x1aaa <Endpoint_Write_Control_PStream_LE+0xaa>
    1a4c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a50:	80 ff       	sbrs	r24, 0
    1a52:	e9 cf       	rjmp	.-46     	; 0x1a26 <Endpoint_Write_Control_PStream_LE+0x26>
    1a54:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1a58:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	92 2b       	or	r25, r18
    1a60:	61 15       	cp	r22, r1
    1a62:	71 05       	cpc	r23, r1
    1a64:	59 f0       	breq	.+22     	; 0x1a7c <Endpoint_Write_Control_PStream_LE+0x7c>
    1a66:	88 30       	cpi	r24, 0x08	; 8
    1a68:	91 05       	cpc	r25, r1
    1a6a:	40 f4       	brcc	.+16     	; 0x1a7c <Endpoint_Write_Control_PStream_LE+0x7c>
    1a6c:	24 91       	lpm	r18, Z
    1a6e:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    1a72:	31 96       	adiw	r30, 0x01	; 1
    1a74:	61 50       	subi	r22, 0x01	; 1
    1a76:	71 09       	sbc	r23, r1
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	f2 cf       	rjmp	.-28     	; 0x1a60 <Endpoint_Write_Control_PStream_LE+0x60>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	08 97       	sbiw	r24, 0x08	; 8
    1a80:	09 f0       	breq	.+2      	; 0x1a84 <Endpoint_Write_Control_PStream_LE+0x84>
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a88:	8e 77       	andi	r24, 0x7E	; 126
    1a8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1a8e:	cb cf       	rjmp	.-106    	; 0x1a26 <Endpoint_Write_Control_PStream_LE+0x26>
    1a90:	21 11       	cpse	r18, r1
    1a92:	cc cf       	rjmp	.-104    	; 0x1a2c <Endpoint_Write_Control_PStream_LE+0x2c>
    1a94:	0a c0       	rjmp	.+20     	; 0x1aaa <Endpoint_Write_Control_PStream_LE+0xaa>
    1a96:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    1a9a:	88 23       	and	r24, r24
    1a9c:	61 f0       	breq	.+24     	; 0x1ab6 <Endpoint_Write_Control_PStream_LE+0xb6>
    1a9e:	85 30       	cpi	r24, 0x05	; 5
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <Endpoint_Write_Control_PStream_LE+0xba>
    1aa2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1aa6:	83 fd       	sbrc	r24, 3
    1aa8:	0a c0       	rjmp	.+20     	; 0x1abe <Endpoint_Write_Control_PStream_LE+0xbe>
    1aaa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1aae:	82 ff       	sbrs	r24, 2
    1ab0:	f2 cf       	rjmp	.-28     	; 0x1a96 <Endpoint_Write_Control_PStream_LE+0x96>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	08 95       	ret
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	08 95       	ret
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	08 95       	ret
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	08 95       	ret

00001ac2 <Endpoint_Write_Control_EStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    1ac2:	cf 92       	push	r12
    1ac4:	df 92       	push	r13
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	eb 01       	movw	r28, r22
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1ad4:	20 91 eb 01 	lds	r18, 0x01EB	; 0x8001eb <USB_ControlRequest+0x6>
    1ad8:	30 91 ec 01 	lds	r19, 0x01EC	; 0x8001ec <USB_ControlRequest+0x7>
    1adc:	26 17       	cp	r18, r22
    1ade:	37 07       	cpc	r19, r23
    1ae0:	40 f0       	brcs	.+16     	; 0x1af2 <Endpoint_Write_Control_EStream_LE+0x30>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1ae2:	20 97       	sbiw	r28, 0x00	; 0
    1ae4:	39 f4       	brne	.+14     	; 0x1af4 <Endpoint_Write_Control_EStream_LE+0x32>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1ae6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1aea:	2e 77       	andi	r18, 0x7E	; 126
    1aec:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1af0:	01 c0       	rjmp	.+2      	; 0x1af4 <Endpoint_Write_Control_EStream_LE+0x32>
    1af2:	e9 01       	movw	r28, r18
		else if (Endpoint_IsOUTReceived())
		  break;

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1af4:	6c 01       	movw	r12, r24
    1af6:	20 e0       	ldi	r18, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1af8:	20 97       	sbiw	r28, 0x00	; 0
    1afa:	d9 f1       	breq	.+118    	; 0x1b72 <Endpoint_Write_Control_EStream_LE+0xb0>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1afc:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b00:	88 23       	and	r24, r24
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <Endpoint_Write_Control_EStream_LE+0x44>
    1b04:	49 c0       	rjmp	.+146    	; 0x1b98 <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b06:	85 30       	cpi	r24, 0x05	; 5
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <Endpoint_Write_Control_EStream_LE+0x4a>
    1b0a:	48 c0       	rjmp	.+144    	; 0x1b9c <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b0c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b10:	83 fd       	sbrc	r24, 3
    1b12:	46 c0       	rjmp	.+140    	; 0x1ba0 <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b14:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    1b18:	82 fd       	sbrc	r24, 2
    1b1a:	38 c0       	rjmp	.+112    	; 0x1b8c <Endpoint_Write_Control_EStream_LE+0xca>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b1c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
    1b20:	80 ff       	sbrs	r24, 0
    1b22:	ea cf       	rjmp	.-44     	; 0x1af8 <Endpoint_Write_Control_EStream_LE+0x36>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1b24:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
    1b28:	00 91 f2 00 	lds	r16, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	18 2b       	or	r17, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    1b30:	78 01       	movw	r14, r16
    1b32:	c7 01       	movw	r24, r14
    1b34:	80 1b       	sub	r24, r16
    1b36:	91 0b       	sbc	r25, r17
    1b38:	8c 0d       	add	r24, r12
    1b3a:	9d 1d       	adc	r25, r13

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1b3c:	20 97       	sbiw	r28, 0x00	; 0
    1b3e:	61 f0       	breq	.+24     	; 0x1b58 <Endpoint_Write_Control_EStream_LE+0x96>
    1b40:	38 e0       	ldi	r19, 0x08	; 8
    1b42:	e3 16       	cp	r14, r19
    1b44:	f1 04       	cpc	r15, r1
    1b46:	40 f4       	brcc	.+16     	; 0x1b58 <Endpoint_Write_Control_EStream_LE+0x96>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    1b48:	90 d3       	rcall	.+1824   	; 0x226a <eeprom_read_byte>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1b4a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    1b4e:	21 97       	sbiw	r28, 0x01	; 1
				BytesInEndpoint++;
    1b50:	2f ef       	ldi	r18, 0xFF	; 255
    1b52:	e2 1a       	sub	r14, r18
    1b54:	f2 0a       	sbc	r15, r18
    1b56:	ed cf       	rjmp	.-38     	; 0x1b32 <Endpoint_Write_Control_EStream_LE+0x70>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    1b58:	21 e0       	ldi	r18, 0x01	; 1
    1b5a:	38 e0       	ldi	r19, 0x08	; 8
    1b5c:	e3 16       	cp	r14, r19
    1b5e:	f1 04       	cpc	r15, r1
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <Endpoint_Write_Control_EStream_LE+0xa2>
    1b62:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b64:	30 91 e8 00 	lds	r19, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1b68:	3e 77       	andi	r19, 0x7E	; 126
    1b6a:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1b6e:	6c 01       	movw	r12, r24
    1b70:	c3 cf       	rjmp	.-122    	; 0x1af8 <Endpoint_Write_Control_EStream_LE+0x36>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1b72:	21 11       	cpse	r18, r1
    1b74:	c3 cf       	rjmp	.-122    	; 0x1afc <Endpoint_Write_Control_EStream_LE+0x3a>
    1b76:	0a c0       	rjmp	.+20     	; 0x1b8c <Endpoint_Write_Control_EStream_LE+0xca>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b78:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b7c:	88 23       	and	r24, r24
    1b7e:	61 f0       	breq	.+24     	; 0x1b98 <Endpoint_Write_Control_EStream_LE+0xd6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b80:	85 30       	cpi	r24, 0x05	; 5
    1b82:	61 f0       	breq	.+24     	; 0x1b9c <Endpoint_Write_Control_EStream_LE+0xda>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1b84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1b88:	83 fd       	sbrc	r24, 3
    1b8a:	0a c0       	rjmp	.+20     	; 0x1ba0 <Endpoint_Write_Control_EStream_LE+0xde>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1b90:	82 ff       	sbrs	r24, 2
    1b92:	f2 cf       	rjmp	.-28     	; 0x1b78 <Endpoint_Write_Control_EStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	05 c0       	rjmp	.+10     	; 0x1ba2 <Endpoint_Write_Control_EStream_LE+0xe0>
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1b9c:	83 e0       	ldi	r24, 0x03	; 3
    1b9e:	01 c0       	rjmp	.+2      	; 0x1ba2 <Endpoint_Write_Control_EStream_LE+0xe0>
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	1f 91       	pop	r17
    1ba8:	0f 91       	pop	r16
    1baa:	ff 90       	pop	r15
    1bac:	ef 90       	pop	r14
    1bae:	df 90       	pop	r13
    1bb0:	cf 90       	pop	r12
    1bb2:	08 95       	ret

00001bb4 <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1bb4:	98 2f       	mov	r25, r24
    1bb6:	97 30       	cpi	r25, 0x07	; 7
    1bb8:	68 f5       	brcc	.+90     	; 0x1c14 <Endpoint_ConfigureEndpoint_Prv+0x60>
    1bba:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1bbe:	98 17       	cp	r25, r24
    1bc0:	39 f0       	breq	.+14     	; 0x1bd0 <Endpoint_ConfigureEndpoint_Prv+0x1c>
    1bc2:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1bc6:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1bca:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1bce:	03 c0       	rjmp	.+6      	; 0x1bd6 <Endpoint_ConfigureEndpoint_Prv+0x22>
    1bd0:	24 2f       	mov	r18, r20
    1bd2:	76 2f       	mov	r23, r22
    1bd4:	50 e0       	ldi	r21, 0x00	; 0
    1bd6:	21 fd       	sbrc	r18, 1
    1bd8:	02 c0       	rjmp	.+4      	; 0x1bde <Endpoint_ConfigureEndpoint_Prv+0x2a>
    1bda:	9f 5f       	subi	r25, 0xFF	; 255
    1bdc:	ec cf       	rjmp	.-40     	; 0x1bb6 <Endpoint_ConfigureEndpoint_Prv+0x2>
    1bde:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1be2:	3e 7f       	andi	r19, 0xFE	; 254
    1be4:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1be8:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1bec:	3d 7f       	andi	r19, 0xFD	; 253
    1bee:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1bf2:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1bf6:	31 60       	ori	r19, 0x01	; 1
    1bf8:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    1bfc:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1c00:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
    1c04:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1c08:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
    1c0c:	27 fd       	sbrc	r18, 7
    1c0e:	e5 cf       	rjmp	.-54     	; 0x1bda <Endpoint_ConfigureEndpoint_Prv+0x26>
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	08 95       	ret
    1c14:	8f 70       	andi	r24, 0x0F	; 15
    1c16:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	08 95       	ret

00001c1e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1c1e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>
    1c22:	87 ff       	sbrs	r24, 7
    1c24:	11 c0       	rjmp	.+34     	; 0x1c48 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1c26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
    1c2a:	82 fd       	sbrc	r24, 2
    1c2c:	05 c0       	rjmp	.+10     	; 0x1c38 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c2e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    1c32:	81 11       	cpse	r24, r1
    1c34:	f8 cf       	rjmp	.-16     	; 0x1c26 <Endpoint_ClearStatusStage+0x8>
    1c36:	11 c0       	rjmp	.+34     	; 0x1c5a <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1c38:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1c3c:	8b 77       	andi	r24, 0x7B	; 123
    1c3e:	0b c0       	rjmp	.+22     	; 0x1c56 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1c40:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    1c44:	88 23       	and	r24, r24
    1c46:	49 f0       	breq	.+18     	; 0x1c5a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1c4c:	80 ff       	sbrs	r24, 0
    1c4e:	f8 cf       	rjmp	.-16     	; 0x1c40 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1c50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1c54:	8e 77       	andi	r24, 0x7E	; 126
    1c56:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    1c5a:	08 95       	ret

00001c5c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1c5c:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1c60:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
    1c64:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1c66:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1c6a:	84 2f       	mov	r24, r20
    1c6c:	81 70       	andi	r24, 0x01	; 1
    1c6e:	40 ff       	sbrs	r20, 0
    1c70:	23 c0       	rjmp	.+70     	; 0x1cb8 <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1c72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1c76:	80 fd       	sbrc	r24, 0
    1c78:	1d c0       	rjmp	.+58     	; 0x1cb4 <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1c7a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1c7e:	88 23       	and	r24, r24
    1c80:	99 f0       	breq	.+38     	; 0x1ca8 <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1c82:	85 30       	cpi	r24, 0x05	; 5
    1c84:	99 f0       	breq	.+38     	; 0x1cac <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1c86:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1c8a:	85 fd       	sbrc	r24, 5
    1c8c:	11 c0       	rjmp	.+34     	; 0x1cb0 <Endpoint_WaitUntilReady+0x54>
    1c8e:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
    1c92:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1c96:	24 17       	cp	r18, r20
    1c98:	35 07       	cpc	r19, r21
    1c9a:	29 f3       	breq	.-54     	; 0x1c66 <Endpoint_WaitUntilReady+0xa>
    1c9c:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1c9e:	11 f0       	breq	.+4      	; 0x1ca4 <Endpoint_WaitUntilReady+0x48>
    1ca0:	9a 01       	movw	r18, r20
    1ca2:	e1 cf       	rjmp	.-62     	; 0x1c66 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ca4:	84 e0       	ldi	r24, 0x04	; 4
    1ca6:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1cac:	83 e0       	ldi	r24, 0x03	; 3
    1cae:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1cb8:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1cbc:	42 ff       	sbrs	r20, 2
    1cbe:	dd cf       	rjmp	.-70     	; 0x1c7a <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1cc0:	08 95       	ret

00001cc2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1cca:	4b d0       	rcall	.+150    	; 0x1d62 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1ccc:	52 d0       	rcall	.+164    	; 0x1d72 <USB_INT_ClearAllInterrupts>
    1cce:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1cd0:	d0 e0       	ldi	r29, 0x00	; 0
    1cd2:	88 81       	ld	r24, Y
    1cd4:	8f 77       	andi	r24, 0x7F	; 127
    1cd6:	88 83       	st	Y, r24
    1cd8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
    1cda:	80 68       	ori	r24, 0x80	; 128
    1cdc:	88 83       	st	Y, r24
    1cde:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1ce0:	8f 7d       	andi	r24, 0xDF	; 223
    1ce2:	88 83       	st	Y, r24
    1ce4:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1ce6:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1cea:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
    1cee:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1cf2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1cf6:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1cf8:	10 e0       	ldi	r17, 0x00	; 0
    1cfa:	f8 01       	movw	r30, r16
    1cfc:	80 81       	ld	r24, Z
    1cfe:	8b 7f       	andi	r24, 0xFB	; 251
    1d00:	80 83       	st	Z, r24
    1d02:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1d04:	81 60       	ori	r24, 0x01	; 1
    1d06:	88 83       	st	Y, r24
    1d08:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d0a:	60 e0       	ldi	r22, 0x00	; 0
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	52 df       	rcall	.-348    	; 0x1bb4 <Endpoint_ConfigureEndpoint_Prv>
    1d10:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d12:	f0 e0       	ldi	r31, 0x00	; 0
    1d14:	80 81       	ld	r24, Z
    1d16:	8e 7f       	andi	r24, 0xFE	; 254
    1d18:	80 83       	st	Z, r24
    1d1a:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	81 60       	ori	r24, 0x01	; 1
    1d22:	80 83       	st	Z, r24
    1d24:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1d26:	88 60       	ori	r24, 0x08	; 8
    1d28:	80 83       	st	Z, r24
    1d2a:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1d2c:	80 81       	ld	r24, Z
    1d2e:	8e 7f       	andi	r24, 0xFE	; 254
    1d30:	80 83       	st	Z, r24
    1d32:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1d34:	80 61       	ori	r24, 0x10	; 16
    1d36:	88 83       	st	Y, r24
    1d38:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <USB_Init>:
    1d42:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	8f 7e       	andi	r24, 0xEF	; 239
    1d4a:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1d4c:	e7 ed       	ldi	r30, 0xD7	; 215
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	81 60       	ori	r24, 0x01	; 1
    1d54:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1d56:	84 e0       	ldi	r24, 0x04	; 4
    1d58:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <USB_IsInitialized>

	USB_ResetInterface();
    1d60:	b0 cf       	rjmp	.-160    	; 0x1cc2 <USB_ResetInterface>

00001d62 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1d62:	e8 ed       	ldi	r30, 0xD8	; 216
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	8e 7f       	andi	r24, 0xFE	; 254
    1d6a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1d6c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1d70:	08 95       	ret

00001d72 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1d72:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1d76:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1d7a:	08 95       	ret

00001d7c <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1d7c:	1f 92       	push	r1
    1d7e:	0f 92       	push	r0
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	0f 92       	push	r0
    1d84:	11 24       	eor	r1, r1
    1d86:	2f 93       	push	r18
    1d88:	3f 93       	push	r19
    1d8a:	4f 93       	push	r20
    1d8c:	5f 93       	push	r21
    1d8e:	6f 93       	push	r22
    1d90:	7f 93       	push	r23
    1d92:	8f 93       	push	r24
    1d94:	9f 93       	push	r25
    1d96:	af 93       	push	r26
    1d98:	bf 93       	push	r27
    1d9a:	ef 93       	push	r30
    1d9c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1d9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1da2:	82 ff       	sbrs	r24, 2
    1da4:	0a c0       	rjmp	.+20     	; 0x1dba <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1da6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1daa:	82 ff       	sbrs	r24, 2
    1dac:	06 c0       	rjmp	.+12     	; 0x1dba <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1dae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1db2:	8b 7f       	andi	r24, 0xFB	; 251
    1db4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1db8:	28 d2       	rcall	.+1104   	; 0x220a <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1dba:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1dbe:	80 ff       	sbrs	r24, 0
    1dc0:	1f c0       	rjmp	.+62     	; 0x1e00 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1dc2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1dc6:	80 ff       	sbrs	r24, 0
    1dc8:	1b c0       	rjmp	.+54     	; 0x1e00 <__vector_10+0x84>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1dca:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
    1dce:	8e 7f       	andi	r24, 0xFE	; 254
    1dd0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1dd4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1dd8:	80 ff       	sbrs	r24, 0
    1dda:	0d c0       	rjmp	.+26     	; 0x1df6 <__vector_10+0x7a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1ddc:	80 e1       	ldi	r24, 0x10	; 16
    1dde:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1de0:	82 e1       	ldi	r24, 0x12	; 18
    1de2:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1de4:	09 b4       	in	r0, 0x29	; 41
    1de6:	00 fe       	sbrs	r0, 0
    1de8:	fd cf       	rjmp	.-6      	; 0x1de4 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>
			EVENT_USB_Device_Connect();
    1df0:	0e 94 c1 03 	call	0x782	; 0x782 <EVENT_USB_Device_Connect>
    1df4:	05 c0       	rjmp	.+10     	; 0x1e00 <__vector_10+0x84>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1df6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1df8:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
    1dfc:	0e 94 c2 03 	call	0x784	; 0x784 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1e00:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1e04:	80 ff       	sbrs	r24, 0
    1e06:	18 c0       	rjmp	.+48     	; 0x1e38 <__vector_10+0xbc>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1e08:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1e0c:	80 ff       	sbrs	r24, 0
    1e0e:	14 c0       	rjmp	.+40     	; 0x1e38 <__vector_10+0xbc>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1e10:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1e14:	8e 7f       	andi	r24, 0xFE	; 254
    1e16:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1e1a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1e1e:	80 61       	ori	r24, 0x10	; 16
    1e20:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1e24:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1e28:	80 62       	ori	r24, 0x20	; 32
    1e2a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1e2e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1e30:	85 e0       	ldi	r24, 0x05	; 5
    1e32:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
    1e36:	e9 d1       	rcall	.+978    	; 0x220a <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1e38:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1e3c:	84 ff       	sbrs	r24, 4
    1e3e:	2f c0       	rjmp	.+94     	; 0x1e9e <__vector_10+0x122>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1e40:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1e44:	84 ff       	sbrs	r24, 4
    1e46:	2b c0       	rjmp	.+86     	; 0x1e9e <__vector_10+0x122>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1e48:	80 e1       	ldi	r24, 0x10	; 16
    1e4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1e4c:	82 e1       	ldi	r24, 0x12	; 18
    1e4e:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1e50:	09 b4       	in	r0, 0x29	; 41
    1e52:	00 fe       	sbrs	r0, 0
    1e54:	fd cf       	rjmp	.-6      	; 0x1e50 <__vector_10+0xd4>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1e56:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
    1e5a:	8f 7d       	andi	r24, 0xDF	; 223
    1e5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1e60:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1e64:	8f 7e       	andi	r24, 0xEF	; 239
    1e66:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1e6a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1e6e:	8f 7e       	andi	r24, 0xEF	; 239
    1e70:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1e74:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1e78:	81 60       	ori	r24, 0x01	; 1
    1e7a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1e7e:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <USB_Device_ConfigurationNumber>
    1e82:	88 23       	and	r24, r24
    1e84:	11 f0       	breq	.+4      	; 0x1e8a <__vector_10+0x10e>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1e86:	84 e0       	ldi	r24, 0x04	; 4
    1e88:	07 c0       	rjmp	.+14     	; 0x1e98 <__vector_10+0x11c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1e8a:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1e8e:	87 fd       	sbrc	r24, 7
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <__vector_10+0x11a>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <__vector_10+0x11c>
    1e96:	83 e0       	ldi	r24, 0x03	; 3
    1e98:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1e9c:	b6 d1       	rcall	.+876    	; 0x220a <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1e9e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1ea2:	83 ff       	sbrs	r24, 3
    1ea4:	27 c0       	rjmp	.+78     	; 0x1ef4 <__vector_10+0x178>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1ea6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1eaa:	83 ff       	sbrs	r24, 3
    1eac:	23 c0       	rjmp	.+70     	; 0x1ef4 <__vector_10+0x178>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1eae:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1eb2:	87 7f       	andi	r24, 0xF7	; 247
    1eb4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1eb8:	82 e0       	ldi	r24, 0x02	; 2
    1eba:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
    1ebe:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1ec2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
    1ec6:	8e 7f       	andi	r24, 0xFE	; 254
    1ec8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1ecc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1ed0:	8e 7f       	andi	r24, 0xFE	; 254
    1ed2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1ed6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
    1eda:	80 61       	ori	r24, 0x10	; 16
    1edc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1ee0:	42 e0       	ldi	r20, 0x02	; 2
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	66 de       	rcall	.-820    	; 0x1bb4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1ee8:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1eec:	88 60       	ori	r24, 0x08	; 8
    1eee:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1ef2:	8b d1       	rcall	.+790    	; 0x220a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1ef4:	ff 91       	pop	r31
    1ef6:	ef 91       	pop	r30
    1ef8:	bf 91       	pop	r27
    1efa:	af 91       	pop	r26
    1efc:	9f 91       	pop	r25
    1efe:	8f 91       	pop	r24
    1f00:	7f 91       	pop	r23
    1f02:	6f 91       	pop	r22
    1f04:	5f 91       	pop	r21
    1f06:	4f 91       	pop	r20
    1f08:	3f 91       	pop	r19
    1f0a:	2f 91       	pop	r18
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	0f 90       	pop	r0
    1f12:	1f 90       	pop	r1
    1f14:	18 95       	reti

00001f16 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1f16:	1f 92       	push	r1
    1f18:	0f 92       	push	r0
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	0f 92       	push	r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	2f 93       	push	r18
    1f22:	3f 93       	push	r19
    1f24:	4f 93       	push	r20
    1f26:	5f 93       	push	r21
    1f28:	6f 93       	push	r22
    1f2a:	7f 93       	push	r23
    1f2c:	8f 93       	push	r24
    1f2e:	9f 93       	push	r25
    1f30:	af 93       	push	r26
    1f32:	bf 93       	push	r27
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	ef 93       	push	r30
    1f3a:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1f3c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    1f40:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1f42:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    1f46:	d8 2f       	mov	r29, r24
    1f48:	d1 70       	andi	r29, 0x01	; 1
    1f4a:	80 fd       	sbrc	r24, 0
    1f4c:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f4e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1f52:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1f56:	87 7f       	andi	r24, 0xF7	; 247
    1f58:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1f5c:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1f5e:	1e d0       	rcall	.+60     	; 0x1f9c <USB_Device_ProcessControlRequest>
    1f60:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1f64:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1f68:	88 60       	ori	r24, 0x08	; 8
    1f6a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
    1f6e:	cd 2b       	or	r28, r29
    1f70:	cf 70       	andi	r28, 0x0F	; 15
    1f72:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1f76:	ff 91       	pop	r31
    1f78:	ef 91       	pop	r30
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <USB_Device_ProcessControlRequest+0x8>
    1fa4:	1f 92       	push	r1
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	e5 ee       	ldi	r30, 0xE5	; 229
    1fac:	f1 e0       	ldi	r31, 0x01	; 1
    1fae:	8d ee       	ldi	r24, 0xED	; 237
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1fb2:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1fb6:	21 93       	st	Z+, r18
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1fb8:	8e 17       	cp	r24, r30
    1fba:	9f 07       	cpc	r25, r31
    1fbc:	d1 f7       	brne	.-12     	; 0x1fb2 <USB_Device_ProcessControlRequest+0x16>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1fbe:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1fc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
    1fc6:	83 ff       	sbrs	r24, 3
    1fc8:	0b c1       	rjmp	.+534    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1fca:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
    1fce:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <USB_ControlRequest+0x1>
    1fd2:	95 30       	cpi	r25, 0x05	; 5
    1fd4:	09 f4       	brne	.+2      	; 0x1fd8 <USB_Device_ProcessControlRequest+0x3c>
    1fd6:	83 c0       	rjmp	.+262    	; 0x20de <USB_Device_ProcessControlRequest+0x142>
    1fd8:	30 f4       	brcc	.+12     	; 0x1fe6 <USB_Device_ProcessControlRequest+0x4a>
    1fda:	91 30       	cpi	r25, 0x01	; 1
    1fdc:	a9 f1       	breq	.+106    	; 0x2048 <USB_Device_ProcessControlRequest+0xac>
    1fde:	68 f0       	brcs	.+26     	; 0x1ffa <USB_Device_ProcessControlRequest+0x5e>
    1fe0:	93 30       	cpi	r25, 0x03	; 3
    1fe2:	91 f1       	breq	.+100    	; 0x2048 <USB_Device_ProcessControlRequest+0xac>
    1fe4:	fd c0       	rjmp	.+506    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
    1fe6:	98 30       	cpi	r25, 0x08	; 8
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <USB_Device_ProcessControlRequest+0x50>
    1fea:	c9 c0       	rjmp	.+402    	; 0x217e <USB_Device_ProcessControlRequest+0x1e2>
    1fec:	99 30       	cpi	r25, 0x09	; 9
    1fee:	09 f4       	brne	.+2      	; 0x1ff2 <USB_Device_ProcessControlRequest+0x56>
    1ff0:	d5 c0       	rjmp	.+426    	; 0x219c <USB_Device_ProcessControlRequest+0x200>
    1ff2:	96 30       	cpi	r25, 0x06	; 6
    1ff4:	09 f0       	breq	.+2      	; 0x1ff8 <USB_Device_ProcessControlRequest+0x5c>
    1ff6:	f4 c0       	rjmp	.+488    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
    1ff8:	94 c0       	rjmp	.+296    	; 0x2122 <USB_Device_ProcessControlRequest+0x186>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ffa:	80 38       	cpi	r24, 0x80	; 128
    1ffc:	21 f0       	breq	.+8      	; 0x2006 <USB_Device_ProcessControlRequest+0x6a>
    1ffe:	82 38       	cpi	r24, 0x82	; 130
    2000:	09 f0       	breq	.+2      	; 0x2004 <USB_Device_ProcessControlRequest+0x68>
    2002:	ee c0       	rjmp	.+476    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <USB_Device_ProcessControlRequest+0x7a>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    2006:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    200a:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <USB_Device_RemoteWakeupEnabled>
    200e:	99 23       	and	r25, r25
    2010:	89 f0       	breq	.+34     	; 0x2034 <USB_Device_ProcessControlRequest+0x98>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    2012:	82 60       	ori	r24, 0x02	; 2
    2014:	0f c0       	rjmp	.+30     	; 0x2034 <USB_Device_ProcessControlRequest+0x98>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2016:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
    201a:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    201c:	87 30       	cpi	r24, 0x07	; 7
    201e:	08 f0       	brcs	.+2      	; 0x2022 <USB_Device_ProcessControlRequest+0x86>
    2020:	df c0       	rjmp	.+446    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2022:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    2026:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    202a:	85 fb       	bst	r24, 5
    202c:	88 27       	eor	r24, r24
    202e:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2030:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2034:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2038:	97 7f       	andi	r25, 0xF7	; 247
    203a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    203e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
    2042:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
    2046:	a6 c0       	rjmp	.+332    	; 0x2194 <USB_Device_ProcessControlRequest+0x1f8>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2048:	28 2f       	mov	r18, r24
    204a:	2d 7f       	andi	r18, 0xFD	; 253
    204c:	09 f0       	breq	.+2      	; 0x2050 <USB_Device_ProcessControlRequest+0xb4>
    204e:	c8 c0       	rjmp	.+400    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    2050:	88 23       	and	r24, r24
    2052:	19 f0       	breq	.+6      	; 0x205a <USB_Device_ProcessControlRequest+0xbe>
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	61 f0       	breq	.+24     	; 0x2070 <USB_Device_ProcessControlRequest+0xd4>
    2058:	c3 c0       	rjmp	.+390    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    205a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    205e:	81 30       	cpi	r24, 0x01	; 1
    2060:	09 f0       	breq	.+2      	; 0x2064 <USB_Device_ProcessControlRequest+0xc8>
    2062:	be c0       	rjmp	.+380    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    2064:	93 30       	cpi	r25, 0x03	; 3
    2066:	09 f0       	breq	.+2      	; 0x206a <USB_Device_ProcessControlRequest+0xce>
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <USB_Device_RemoteWakeupEnabled>
    206e:	2e c0       	rjmp	.+92     	; 0x20cc <USB_Device_ProcessControlRequest+0x130>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    2070:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    2074:	81 11       	cpse	r24, r1
    2076:	2a c0       	rjmp	.+84     	; 0x20cc <USB_Device_ProcessControlRequest+0x130>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    2078:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
    207c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    207e:	2f ef       	ldi	r18, 0xFF	; 255
    2080:	28 0f       	add	r18, r24
    2082:	26 30       	cpi	r18, 0x06	; 6
    2084:	08 f0       	brcs	.+2      	; 0x2088 <USB_Device_ProcessControlRequest+0xec>
    2086:	ac c0       	rjmp	.+344    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2088:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    208c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    2090:	20 ff       	sbrs	r18, 0
    2092:	1c c0       	rjmp	.+56     	; 0x20cc <USB_Device_ProcessControlRequest+0x130>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    2094:	93 30       	cpi	r25, 0x03	; 3
    2096:	21 f4       	brne	.+8      	; 0x20a0 <USB_Device_ProcessControlRequest+0x104>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2098:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    209c:	80 62       	ori	r24, 0x20	; 32
    209e:	14 c0       	rjmp	.+40     	; 0x20c8 <USB_Device_ProcessControlRequest+0x12c>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    20a0:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    20a4:	90 61       	ori	r25, 0x10	; 16
    20a6:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    20aa:	21 e0       	ldi	r18, 0x01	; 1
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	a9 01       	movw	r20, r18
    20b0:	02 c0       	rjmp	.+4      	; 0x20b6 <USB_Device_ProcessControlRequest+0x11a>
    20b2:	44 0f       	add	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	8a 95       	dec	r24
    20b8:	e2 f7       	brpl	.-8      	; 0x20b2 <USB_Device_ProcessControlRequest+0x116>
    20ba:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
    20be:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    20c2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    20c6:	88 60       	ori	r24, 0x08	; 8
    20c8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20cc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20d0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    20d4:	87 7f       	andi	r24, 0xF7	; 247
    20d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    20da:	a1 dd       	rcall	.-1214   	; 0x1c1e <Endpoint_ClearStatusStage>
    20dc:	81 c0       	rjmp	.+258    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    20de:	81 11       	cpse	r24, r1
    20e0:	7f c0       	rjmp	.+254    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    20e2:	10 91 e7 01 	lds	r17, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    20e6:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    20e8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    20ec:	80 78       	andi	r24, 0x80	; 128
    20ee:	81 2b       	or	r24, r17
    20f0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    20f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    20f8:	87 7f       	andi	r24, 0xF7	; 247
    20fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    20fe:	8f dd       	rcall	.-1250   	; 0x1c1e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2100:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
    2104:	80 ff       	sbrs	r24, 0
    2106:	fc cf       	rjmp	.-8      	; 0x2100 <USB_Device_ProcessControlRequest+0x164>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    2108:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
    210c:	80 68       	ori	r24, 0x80	; 128
    210e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    2112:	11 11       	cpse	r17, r1
    2114:	02 c0       	rjmp	.+4      	; 0x211a <USB_Device_ProcessControlRequest+0x17e>
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	01 c0       	rjmp	.+2      	; 0x211c <USB_Device_ProcessControlRequest+0x180>
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>
    2120:	5f c0       	rjmp	.+190    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    2122:	80 58       	subi	r24, 0x80	; 128
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	08 f0       	brcs	.+2      	; 0x212a <USB_Device_ProcessControlRequest+0x18e>
    2128:	5b c0       	rjmp	.+182    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    212a:	60 91 e9 01 	lds	r22, 0x01E9	; 0x8001e9 <USB_ControlRequest+0x4>
    212e:	70 91 ea 01 	lds	r23, 0x01EA	; 0x8001ea <USB_ControlRequest+0x5>
    2132:	9e 01       	movw	r18, r28
    2134:	2d 5f       	subi	r18, 0xFD	; 253
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	ae 01       	movw	r20, r28
    213a:	4f 5f       	subi	r20, 0xFF	; 255
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
    213e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    2142:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
    2146:	ac d8       	rcall	.-3752   	; 0x12a0 <CALLBACK_USB_GetDescriptor>
    2148:	bc 01       	movw	r22, r24
    214a:	89 2b       	or	r24, r25
    214c:	09 f4       	brne	.+2      	; 0x2150 <USB_Device_ProcessControlRequest+0x1b4>
    214e:	48 c0       	rjmp	.+144    	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2150:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2154:	87 7f       	andi	r24, 0xF7	; 247
    2156:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
	#else
	if (DescriptorAddressSpace == MEMSPACE_FLASH)
    215a:	2b 81       	ldd	r18, Y+3	; 0x03
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	21 11       	cpse	r18, r1
	  Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <USB_Device_ProcessControlRequest+0x1cc>
    2164:	4d dc       	rcall	.-1894   	; 0x1a00 <Endpoint_Write_Control_PStream_LE>
	else if (DescriptorAddressSpace == MEMSPACE_EEPROM)
    2166:	05 c0       	rjmp	.+10     	; 0x2172 <USB_Device_ProcessControlRequest+0x1d6>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
    2168:	21 30       	cpi	r18, 0x01	; 1
    216a:	11 f4       	brne	.+4      	; 0x2170 <USB_Device_ProcessControlRequest+0x1d4>
    216c:	aa dc       	rcall	.-1708   	; 0x1ac2 <Endpoint_Write_Control_EStream_LE>
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    216e:	01 c0       	rjmp	.+2      	; 0x2172 <USB_Device_ProcessControlRequest+0x1d6>
    2170:	e9 db       	rcall	.-2094   	; 0x1944 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2172:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2176:	8b 77       	andi	r24, 0x7B	; 123
    2178:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    217c:	31 c0       	rjmp	.+98     	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    217e:	80 38       	cpi	r24, 0x80	; 128
    2180:	79 f5       	brne	.+94     	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2182:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2186:	87 7f       	andi	r24, 0xF7	; 247
    2188:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    218c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2190:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2194:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    2198:	8e 77       	andi	r24, 0x7E	; 126
    219a:	9d cf       	rjmp	.-198    	; 0x20d6 <USB_Device_ProcessControlRequest+0x13a>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    219c:	81 11       	cpse	r24, r1
    219e:	20 c0       	rjmp	.+64     	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    21a0:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    21a4:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <USB_ControlRequest+0x3>
    21a8:	99 27       	eor	r25, r25
    21aa:	02 97       	sbiw	r24, 0x02	; 2
    21ac:	cc f4       	brge	.+50     	; 0x21e0 <USB_Device_ProcessControlRequest+0x244>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21ae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    21b2:	87 7f       	andi	r24, 0xF7	; 247
    21b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    21b8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <USB_ControlRequest+0x2>
    21bc:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
    21c0:	2e dd       	rcall	.-1444   	; 0x1c1e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    21c2:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <USB_Device_ConfigurationNumber>
    21c6:	81 11       	cpse	r24, r1
    21c8:	06 c0       	rjmp	.+12     	; 0x21d6 <USB_Device_ProcessControlRequest+0x23a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    21ca:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    21ce:	87 fd       	sbrc	r24, 7
    21d0:	02 c0       	rjmp	.+4      	; 0x21d6 <USB_Device_ProcessControlRequest+0x23a>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <USB_Device_ProcessControlRequest+0x23c>
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
    21dc:	0e 94 c3 03 	call	0x786	; 0x786 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    21e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    21e4:	83 ff       	sbrs	r24, 3
    21e6:	0a c0       	rjmp	.+20     	; 0x21fc <USB_Device_ProcessControlRequest+0x260>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    21e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
    21ec:	87 7f       	andi	r24, 0xF7	; 247
    21ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    21f2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
    21f6:	80 62       	ori	r24, 0x20	; 32
    21f8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	08 95       	ret

0000220a <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    220a:	08 95       	ret

0000220c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    220c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    220e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <USB_DeviceState>
    2212:	88 23       	and	r24, r24
    2214:	99 f0       	breq	.+38     	; 0x223c <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2216:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
    221a:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    221c:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
    2220:	89 2f       	mov	r24, r25
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	90 fd       	sbrc	r25, 0
    2226:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2228:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    222a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    222e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    2232:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    2234:	b3 de       	rcall	.-666    	; 0x1f9c <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2236:	cf 70       	andi	r28, 0x0F	; 15
    2238:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    223c:	cf 91       	pop	r28
    223e:	08 95       	ret

00002240 <__udivmodqi4>:
    2240:	99 1b       	sub	r25, r25
    2242:	79 e0       	ldi	r23, 0x09	; 9
    2244:	04 c0       	rjmp	.+8      	; 0x224e <__udivmodqi4_ep>

00002246 <__udivmodqi4_loop>:
    2246:	99 1f       	adc	r25, r25
    2248:	96 17       	cp	r25, r22
    224a:	08 f0       	brcs	.+2      	; 0x224e <__udivmodqi4_ep>
    224c:	96 1b       	sub	r25, r22

0000224e <__udivmodqi4_ep>:
    224e:	88 1f       	adc	r24, r24
    2250:	7a 95       	dec	r23
    2252:	c9 f7       	brne	.-14     	; 0x2246 <__udivmodqi4_loop>
    2254:	80 95       	com	r24
    2256:	08 95       	ret

00002258 <memcpy>:
    2258:	fb 01       	movw	r30, r22
    225a:	dc 01       	movw	r26, r24
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <memcpy+0xa>
    225e:	01 90       	ld	r0, Z+
    2260:	0d 92       	st	X+, r0
    2262:	41 50       	subi	r20, 0x01	; 1
    2264:	50 40       	sbci	r21, 0x00	; 0
    2266:	d8 f7       	brcc	.-10     	; 0x225e <memcpy+0x6>
    2268:	08 95       	ret

0000226a <eeprom_read_byte>:
    226a:	f9 99       	sbic	0x1f, 1	; 31
    226c:	fe cf       	rjmp	.-4      	; 0x226a <eeprom_read_byte>
    226e:	92 bd       	out	0x22, r25	; 34
    2270:	81 bd       	out	0x21, r24	; 33
    2272:	f8 9a       	sbi	0x1f, 0	; 31
    2274:	99 27       	eor	r25, r25
    2276:	80 b5       	in	r24, 0x20	; 32
    2278:	08 95       	ret

0000227a <eeprom_write_byte>:
    227a:	26 2f       	mov	r18, r22

0000227c <eeprom_write_r18>:
    227c:	f9 99       	sbic	0x1f, 1	; 31
    227e:	fe cf       	rjmp	.-4      	; 0x227c <eeprom_write_r18>
    2280:	1f ba       	out	0x1f, r1	; 31
    2282:	92 bd       	out	0x22, r25	; 34
    2284:	81 bd       	out	0x21, r24	; 33
    2286:	20 bd       	out	0x20, r18	; 32
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	fa 9a       	sbi	0x1f, 2	; 31
    228e:	f9 9a       	sbi	0x1f, 1	; 31
    2290:	0f be       	out	0x3f, r0	; 63
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	08 95       	ret

00002296 <_exit>:
    2296:	f8 94       	cli

00002298 <__stop_program>:
    2298:	ff cf       	rjmp	.-2      	; 0x2298 <__stop_program>
